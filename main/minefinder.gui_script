local l_data = require "main.leveldata"

local function hide_floppy(self)
	gui.set(gui.get_node("floppy"), "color.w", 0)
end

local function hide_x(self)
	gui.set(gui.get_node("cancel-x"), "color.w", 0)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_color(gui.get_node("retry-select"), vmath.vector4(0, 0, 0, 0))
	self.instances = {}
	self.seconds = 0
	self.seconds_storage = -1
	self.minutes = 0
	self.ticking = false
	self.anim_s_state = 9
	self.anims_on = true
	self.gui_anims = true
	self.more_anims = false
	self.prefer_switch_up = false -- determines which way the switch will move when in the middle
	self.theme = "dark"
	msg.post("/anims#anims", "disable")
end

function update(self, dt)
	if self.ticking then
		self.seconds = self.seconds + dt
	elseif gui.get_text(gui.get_node("timer")) ~= hash("TIME: -:--") and self.seconds == 0 and self.minutes == 0 then
		gui.set_text(gui.get_node("timer"), "TIME: -:--")
	end
	if self.seconds > 60 then
		self.minutes = self.minutes + 1
		self.seconds = self.seconds - 60
	end
	if math.floor(self.seconds) ~= math.floor(self.seconds_storage) and self.ticking then
		local seconds_txt = ""
		if self.seconds < 10 then
			seconds_txt = "0" .. math.floor(self.seconds)
		else
			seconds_txt = "" .. math.floor(self.seconds)
		end
		gui.set_text(gui.get_node("timer"), "TIME: "..self.minutes..":"..seconds_txt)
		self.seconds_storage = self.seconds
	end
end

function on_message(self, message_id, message)
	if message_id == hash("add_url") then
		table.insert(self.instances, message.hash)
	elseif message_id == hash("remove_url") then
		for i, k in ipairs(self.instances) do
			if k.path == message.hash.path then
				table.remove(self.instances, i)
				break
			end
			if i == #self.instances then
				print("nothing removed (" .. tostring(message.hash) .. ")")
			end
		end
	elseif message_id == hash("set_ticking") then
		self.ticking = message.ticking
	elseif message_id == hash("set_mines") then
		gui.set_text(gui.get_node("total-mines"), "TOTAL MINES: "..message.mines)
	elseif message_id == hash("reset") then
		self.seconds = 0
		self.seconds_storage = -1
		self.minutes = 0
		self.ticking = false
		gui.set_text(gui.get_node("flags-left"), message.mines)
	elseif message_id == hash("set_flags") then
		gui.set_text(gui.get_node("flags-left"), message.num)
		if message.num < 0 and gui.get_color(gui.get_node("flags-left")) == vmath.vector4(1, 1, 1, 1) then
			gui.set_color(gui.get_node("flags-left"), vmath.vector4(0.6, 0, 0, 1))
		elseif message.num >= 0 and gui.get_color(gui.get_node("flags-left")) == vmath.vector4(0.6, 0, 0, 1) then
			gui.set_color(gui.get_node("flags-left"), vmath.vector4(1, 1, 1, 1))
		end
	elseif message_id == hash("purge_instances") then
		while self.instances[1] do
			for i, k in ipairs(self.instances) do
				msg.post(k, "kill")
				table.remove(self.instances, i)
			end
		end
	elseif message_id == hash("update_switch") then
		if message.index < 9 then
			self.anim_s_state = self.anim_s_state + message.move
			sprite.play_flipbook("/anim-switch", "switch-"..self.anim_s_state)
		end
		if message.index == 8 then
			if message.move == 1 then
				self.gui_anims = true
			else
				self.gui_anims = false
			end
		end
	elseif message_id == hash("switch_preference") then
		self.prefer_switch_up = message.prefer_up
	elseif message_id == hash("set_hs") then
		if l_data.highscore[l_data.diff] == nil or math.floor(self.seconds + self.minutes*60) < l_data.highscore[l_data.diff] then
			l_data.highscore[l_data.diff] = math.floor(self.seconds + self.minutes*60)
			local seconds_txt = ""
			if self.seconds < 10 then
				seconds_txt = "0" .. math.floor(self.seconds)
			else
				seconds_txt = "" .. math.floor(self.seconds)
			end
			gui.set_text(gui.get_node("highscore"), self.minutes .. ":".. seconds_txt)
		end
	elseif message_id == hash("switch_hs") then
		local difficulty = l_data.diff_temp
		local temporary = true
		if difficulty == nil then
			difficulty = l_data.diff
			temporary = false
		end

		local highscore = gui.get_node("highscore")
		local header = gui.get_node("diff-header")
		local description = gui.get_node("diff-description")
		
		if l_data.highscore[difficulty] then
			local minutes_txt = ""..math.floor(l_data.highscore[difficulty]/60)
			local seconds_txt = ""..math.floor(l_data.highscore[difficulty]%60)
			if tonumber(seconds_txt) < 10 then
				seconds_txt = "0" .. seconds_txt
			end
			
			gui.set_text(highscore, minutes_txt .. ":".. seconds_txt)
		else
			gui.set_text(highscore, "-:--")
		end

		gui.set_text(header, l_data.header[difficulty])
		gui.set_text(description, l_data.description[difficulty])
		
		if temporary then
			gui.set_color(highscore, vmath.vector4((203/255), (219/255), (252/255), 1))
			gui.set_color(header, vmath.vector4((203/255), (219/255), (252/255), 1))
			gui.set_color(description, vmath.vector4((203/255), (219/255), (252/255), 1))
		else
			gui.set_color(highscore, vmath.vector4(1, 1, 1, 1))
			gui.set_color(header, vmath.vector4(1, 1, 1, 1))
			gui.set_color(description, vmath.vector4(1, 1, 1, 1))
		end
		

		local floppy = gui.get_node("floppy")
		local cancel_x = gui.get_node("cancel-x")
		
		if l_data.diff_temp then
			if gui.get(floppy, "color.w") == 0 then
				if self.gui_anims then
					gui.play_flipbook(floppy, "floppy-appear")
					gui.play_flipbook(cancel_x, "x-appear")
				else
					gui.play_flipbook(floppy, "floppy")
					gui.play_flipbook(cancel_x, "cancel-x4")
				end
				gui.set(floppy, "color.w", 1)
				gui.set(cancel_x, "color.w", 1)
			end
		else
			if gui.get(floppy, "color.w") == 1 then
				if self.gui_anims then
					gui.play_flipbook(floppy, "floppy-disappear", hide_floppy)
					gui.play_flipbook(cancel_x, "x-disappear", hide_x)
				else
					gui.set(floppy, "color.w", 0)
					gui.set(cancel_x, "color.w", 0)
				end
			end
		end
		
	end
end

function on_input(self, action_id, action)
	local retry = gui.get_node("retry")
	local retry_s = gui.get_node("retry-select")
	local anim_sel = gui.get_node("anim-switch-select")
	local anim_sel_bg = gui.get_node("anim-switch-select-bg")
	local anim_sel_light = gui.get_node("anim-switch-select-heavy-bg")
	local theme_sel = gui.get_node("theme-switch-select")
	local theme_sel_bg = gui.get_node("theme-switch-select-bg")
	local theme_sel_light = gui.get_node("theme-switch-select-heavy-bg")
	local more_box = gui.get_node("more-box")
	local more_down = gui.get_node("more-box-down")
	local more_lit = gui.get_node("deselect")
	local more_symbol = gui.get_node("more-symbol-mod")
	local floppy = gui.get_node("floppy")
	local floppy_lit = gui.get_node("floppy-lit")
	local cancel_x = gui.get_node("cancel-x")
	local cancel_x_hit = gui.get_node("x-hitbox")
	local cancel_x_lit = gui.get_node("cancel-x-lit")
		
	if gui.pick_node(retry, action.x, action.y) and not self.more_anims then -- retry button
		if gui.get_color(retry_s) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(retry_s, vmath.vector4(1, 1, 1, 1))
		end
		if action_id == hash("touch") and action.pressed then
			msg.post("/zoom#minefinder", "reset")
		end
	elseif gui.get_color(retry_s) ~= vmath.vector4(0, 0, 0, 0) then
		gui.set_color(retry_s, vmath.vector4(0, 0, 0, 0))
	end

	if gui.pick_node(more_box, action.x, action.y) then -- more anims button
		if gui.get_color(more_lit) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(more_lit, vmath.vector4(1, 1, 1, 1))
		end
		if action_id == hash("touch") and action.pressed and gui.get_color(more_down) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(more_down, vmath.vector4(1, 1, 1, 1))
		elseif action_id == hash("touch") and action.released and gui.get_color(more_down) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(more_down, vmath.vector4(0, 0, 0, 0))
			self.more_anims = not self.more_anims
			msg.post("/zoom#minefinder", "more_anims", {shown = self.more_anims})
			if self.more_anims then
				gui.set_color(more_symbol, vmath.vector4(0, 0, 0, 0))
				msg.post("/anims#anims", "enable")
			else
				gui.set_color(more_symbol, vmath.vector4(1, 1, 1, 1))
				msg.post("/anims#anims", "disable")
			end
		end 
	else
		if gui.get_color(more_lit) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(more_lit, vmath.vector4(0, 0, 0, 0))
		end
		if gui.get_color(more_down) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(more_down, vmath.vector4(0, 0, 0, 0))
		end
	end


	if gui.pick_node(anim_sel, action.x, action.y) then --switch click
		if gui.get_color(anim_sel_bg) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(anim_sel_bg, vmath.vector4(1, 1, 1, 1))
		end
		if action_id == hash("touch") and action.pressed and gui.get_color(anim_sel_light) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(anim_sel_light, vmath.vector4(1, 1, 1, 1))
		elseif action_id == hash("touch") and action.released then
			if gui.get_color(anim_sel_light) ~= vmath.vector4(0, 0, 0, 0) then
				gui.set_color(anim_sel_light, vmath.vector4(0, 0, 0, 0))
			end
			
			if self.anim_s_state == 9 then
				sprite.play_flipbook("/anim-switch", "switch-off")
				self.anim_s_state = 1
				msg.post("/zoom#minefinder", "set_anims", {anims = false})
				self.anims_on = false
				msg.post(".", "purge_instances")
			elseif self.anim_s_state == 1 then
				sprite.play_flipbook("/anim-switch", "switch-on")
				self.anim_s_state = 9
				msg.post("/zoom#minefinder", "set_anims", {anims = true})
				self.anims_on = true
			elseif not self.prefer_switch_up then
				self.anim_s_state = 1
				sprite.play_flipbook("/anim-switch", "switch-1")
				msg.post("/zoom#minefinder", "set_anims", {anims = false})
				self.anims_on = false
				msg.post(".", "purge_instances")
			else
				if self.anim_s_state < 2 then
					sprite.play_flipbook("/anim-switch", "switch-on")
				elseif self.anim_s_state < 5 then
					sprite.play_flipbook("/anim-switch", "switch-on-mid")
				elseif self.anim_s_state < 8 then
					sprite.play_flipbook("/anim-switch", "switch-on-end")
				else
					sprite.play_flipbook("/anim-switch", "switch-9")
				end
				self.anim_s_state = 9
				msg.post("/zoom#minefinder", "set_anims", {anims = true})
				self.anims_on = true
			end
			-- self.anims_on = not self.anims_on
			msg.post("/anims#anims", "switch-clicked", {setting = self.anims_on})
		end
	else
		if gui.get_color(anim_sel_bg) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(anim_sel_bg, vmath.vector4(0, 0, 0, 0))
		end
		if gui.get_color(anim_sel_light) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(anim_sel_light, vmath.vector4(0, 0, 0, 0))
		end
	end

	if gui.pick_node(theme_sel, action.x, action.y)  and not self.more_anims then --theme switch click
		if gui.get_color(theme_sel_bg) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(theme_sel_bg, vmath.vector4(1, 1, 1, 1))
		end
		if action_id == hash("touch") and action.pressed and gui.get_color(theme_sel_light) ~= vmath.vector4(1, 1, 1, 1) then
			gui.set_color(theme_sel_light, vmath.vector4(1, 1, 1, 1))
		elseif action_id == hash("touch") and action.released then
			if gui.get_color(theme_sel_light) ~= vmath.vector4(0, 0, 0, 0) then
				gui.set_color(theme_sel_light, vmath.vector4(0, 0, 0, 0))
			end

			if self.theme == "dark" then
				if self.gui_anims then
					sprite.play_flipbook("/light-switch", "light-switch-on")
				else
					sprite.play_flipbook("/light-switch", "light-switch5")
				end
				self.theme = "light"
				msg.post("/zoom#minefinder", "set_theme", {theme = "light"})
			elseif self.theme == "light" then
				if self.gui_anims then
					sprite.play_flipbook("/light-switch", "light-switch-off")
				else
					sprite.play_flipbook("/light-switch", "light-switch1")
				end
				self.theme = "dark"
				msg.post("/zoom#minefinder", "set_theme", {theme = "dark"})
			end
		end
	else
		if gui.get_color(theme_sel_bg) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(theme_sel_bg, vmath.vector4(0, 0, 0, 0))
		end
		if gui.get_color(theme_sel_light) ~= vmath.vector4(0, 0, 0, 0) then
			gui.set_color(theme_sel_light, vmath.vector4(0, 0, 0, 0))
		end
	end

	if gui.pick_node(floppy, action.x, action.y) and not self.more_anims and gui.get(floppy, "color.w") == 1 then --save new diff floppy disk click
		if action_id == hash("touch") and action.pressed then
			gui.set_color(floppy_lit, vmath.vector4(1, 1, 1, 1))
		elseif action_id == hash("touch") and action.released then
			gui.set(floppy_lit, "color.w", 0)
			gui.set(floppy, "color.w", 0)
			if self.gui_anims then
				gui.play_flipbook(cancel_x, "x-disappear", hide_x)
			else
				gui.set(cancel_x, "color.w", 0)
			end
			gui.set_color(gui.get_node("highscore"), vmath.vector4(1, 1, 1, 1))
			gui.set_color(gui.get_node("diff-header"), vmath.vector4(1, 1, 1, 1))
			gui.set_color(gui.get_node("diff-description"), vmath.vector4(1, 1, 1, 1))
			msg.post("/zoom#minefinder", "set_diff")
			msg.post("/zoom#minefinder", "reset")
			msg.post("/zoom#minefinder", "hide_select", {hid = false})
		elseif gui.get(floppy_lit, "color.w") ~= 1 then
			gui.set_color(floppy_lit, vmath.vector4((91/255), (110/255), (225/255), 1))
			msg.post("/zoom#minefinder", "hide_select", {hid = true})
		end
	elseif gui.get(floppy_lit, "color.w") ~= 0 then
		gui.set(floppy_lit, "color.w", 0)
		msg.post("/zoom#minefinder", "hide_select", {hid = false})
	end

	if gui.pick_node(cancel_x_hit, action.x, action.y) and not self.more_anims and gui.get(cancel_x, "color.w") == 1 then --cancel new diff (x)
		if action_id == hash("touch") and action.pressed then
			gui.set(cancel_x_lit, "color.w", 1)
		elseif action_id == hash("touch") and action.released then
			gui.set(cancel_x_lit, "color.w", 0)
			gui.set(cancel_x, "color.w", 0)
			l_data.diff_temp = l_data.diff
			msg.post("/zoom#minefinder", "set_diff")
			msg.post(".", "switch_hs")
			msg.post("/zoom#minefinder", "hide_select", {hid = false})
		elseif gui.get(cancel_x_lit, "color.w") == 0 then
			gui.set(cancel_x_lit, "color.w", 0.4)
			msg.post("/zoom#minefinder", "hide_select", {hid = true})
		end
	elseif gui.get(cancel_x_lit, "color.w") ~= 0 then
		gui.set(cancel_x_lit, "color.w", 0)
		msg.post("/zoom#minefinder", "hide_select", {hid = false})
	end
	

-- 	if (action_id == hash("debug")) and action.pressed then
-- 		print(self.more_anims)
-- 	end
-- 
end

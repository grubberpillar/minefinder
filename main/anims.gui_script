local l_data = require "main.leveldata"

local function hide_cover(self)
	gui.set(gui.get_node("cover"), "color.w", 0)
	gui.set(gui.get_node("light-box"), "color.w", 0)
end

local function cover_noise(self)
	for i = 1,6 do
		timer.delay(0.4*i, false, function()
			if self.cover_up then
				msg.post("/sfx#sfx", "handbrake")
			end
		end)
	end
end

local function replace_txt_color(self, node)
	if node < 9 then
		gui.set_color(self.text_nodes[node], vmath.vector4((142/255), (149/255), (219/255), 1))
	else
		gui.set_color(self.text_nodes[node], vmath.vector4((154/255), (186/255), (254/255), 1))
	end
	if node == 9 then
		gui.set_color(self.text_nodes[11], vmath.vector4((154/255), (186/255), (254/255), 1))
		gui.set_color(self.text_nodes[12], vmath.vector4((154/255), (186/255), (254/255), 1))
	end
end

local function check_set(self, i, check_tbl)
	msg.post("/gui#minefinder", "unsaved")
	local check_bool
	local check_int
	if check_tbl[i] then --checking vars
		check_bool, check_int = false, -1
	else -- check
		check_bool, check_int = true, 1
	end

	if i == 8 then
		self.anims_on = check_bool
	end

	if check_tbl[i] then 
		msg.post("/sfx#sfx", "flip-tile", {strength = 4})
		if self.anims_on then --uncheck
			gui.play_flipbook(self.check_nodes[i], "check-remove")
		else
			gui.play_flipbook(self.check_nodes[i], "uncheck12")
		end
	else -- check
		msg.post("/sfx#sfx", "pencil-check")
		if self.anims_on then
			gui.play_flipbook(self.check_nodes[i], "check-write")
		else
			gui.play_flipbook(self.check_nodes[i], "check")
		end
	end

	check_tbl[i] = check_bool
	if self.disabling == check_tbl[i] then
		self.disabling = not check_bool
		msg.post("/gui#minefinder", "switch_preference", {prefer_up = check_bool})
	end
	msg.post("/gui#minefinder", "update_switch", {move = check_int, index = i})
	msg.post("/zoom#minefinder", "update_anims", {setting = check_bool, index = i})
end

function init(self)
	gui.set_render_order(5)
	self.input_override = true
	self.anims_on = true
	self.visible = false
	self.disabling = true --checks if the user just unchecked (true) or checked (false) a checkbox
	self.boxes = {"place", "rmv", "right", "wrong", "mines", "delay", "t.flip", "ui", "flip_all", "fast_flip"}
	self.text_y_pos = {74, 74, 68, 68, 55, 55, 49, 49, 36, 30}
	self.hitbox_nodes = {}
	self.check_nodes = {}
	self.text_nodes = {}
	self.top_text_nodes = {}
	self.node_hover = nil
	self.node_clicked = nil
	self.current_settings = {}

	self.se_up = true
	self.se_top = gui.get_node("corner-se-top")
	self.se_lit = gui.get_node("corner-se-lit")
	self.se_hit = gui.get_node("corner-se-hit")
	
	for i = 1, 10 do
		self.hitbox_nodes[i] = gui.get_node(self.boxes[i] .. "-hitbox")
	end
	for i = 1, 10 do
		self.check_nodes[i] = gui.get_node(self.boxes[i] .. "-check")
	end
	for i = 1, 10 do
		self.text_nodes[i] = gui.get_node(self.boxes[i] .. "-txt")
	end
	self.text_nodes[9] = gui.get_node(self.boxes[9] .. "-txt-a")
	self.text_nodes[11] = gui.get_node(self.boxes[9] .. "-txt-b")
	self.text_nodes[12] = gui.get_node(self.boxes[9] .. "-txt-c")
	
	for i = 1, 10 do
		self.top_text_nodes[i] = gui.get_node(self.boxes[i] .. "-txt-top")
	end
	self.top_text_nodes[9] = gui.get_node(self.boxes[9] .. "-txt-top-a")
	self.top_text_nodes[11] = gui.get_node(self.boxes[9] .. "-txt-top-b")
	self.top_text_nodes[12] = gui.get_node(self.boxes[9] .. "-txt-top-c")
	
	self.checked = {true, true, true, true, true, true, true, true, false, true}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_game") then
		self.checked = message.anims
		self.anims_on = self.checked[8]
		for i,k in ipairs(self.checked) do
			if k then
				gui.play_flipbook(self.check_nodes[i], "check")
			else
				gui.play_flipbook(self.check_nodes[i], "uncheck12")
			end
		end
		if l_data.door_state == "gone" then
			self.se_up = false
			gui.set(self.se_top, "color.w", 0)
		end
	elseif message_id == hash("disable") then
		if self.visible then
			msg.post("#", "disable")
		end
		self.visible = false
	elseif message_id == hash("enable") then
		if not self.visible then
			msg.post("#", "enable")
		end
		self.visible = true
		for i,k in ipairs(self.checked) do
			self.current_settings[i] = k
		end
	elseif message_id == hash("switch_clicked") then
		msg.post("/gui#minefinder", "unsaved")
		local check_frame
		self.anims_on = message.setting
		if message.setting == true then
			check_frame = "check"
			if self.visible then
				check_frame = check_frame .. "-write"
			end
		else
			check_frame = "uncheck12"
		end
		if message.setting == true and self.visible then
			msg.post("/sfx#sfx", "pencil-check")
		elseif message.setting == false and self.visible then
			msg.post("/sfx#sfx", "flip-tile", {strength = 4})
		end
		for i = 1, 8 do
			if self.checked[i] ~= message.setting then
				self.checked[i] = message.setting
				gui.play_flipbook(self.check_nodes[i], check_frame)
			end
		end
	end
end

function on_input(self, action_id, action)
	if gui.pick_node(gui.get_node("frame"), action.x, action.y) or self.input_override then -- input
		local found_node = false
		for i = 1, 10 do 
			if gui.pick_node(self.hitbox_nodes[i], action.x, action.y) and not (i == 8 and self.cover_up and gui.pick_node(gui.get_node("light-box"), action.x, action.y)) then -- all checkboxes
				self.input_override = true
				found_node = true
				if self.node_hover ~= i then
					if self.node_hover then --lift text (moved off text)
						if self.node_hover < 9 then 
							gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((63/255), (63/255), (116/255), 1))
						else
							if self.node_hover == 9 then
								gui.set_color(self.top_text_nodes[11], vmath.vector4((91/255), (110/255), (225/255), 1))
								gui.set_color(self.top_text_nodes[12], vmath.vector4((91/255), (110/255), (225/255), 1))
							end
							gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((91/255), (110/255), (225/255), 1))
						end
						replace_txt_color(self, self.node_hover)
					end
					
					-- gui.set_color(self.top_text_nodes[i], vmath.vector4(0, 0, 0, 0))--depress text (mouse on text) [OLD]
					--bottom text is white, top text is color of bottom text
					gui.set_color(self.top_text_nodes[i], gui.get_color(self.text_nodes[i]))
					gui.set_color(self.text_nodes[i], vmath.vector4(1, 1, 1, 1))
					if i == 9 then
						gui.set_color(self.top_text_nodes[11], gui.get_color(self.text_nodes[11]))
						gui.set_color(self.top_text_nodes[12], gui.get_color(self.text_nodes[12]))
						gui.set_color(self.text_nodes[11], vmath.vector4(1, 1, 1, 1))
						gui.set_color(self.text_nodes[12], vmath.vector4(1, 1, 1, 1))
					end

					if self.node_clicked then
						if self.node_clicked == 9 then
							gui.set(gui.get_node("flip_all-txt-top"), "position.y", self.text_y_pos[self.node_clicked])
						else
							gui.set(self.top_text_nodes[self.node_clicked], "position.y", self.text_y_pos[self.node_clicked])
						end
						self.node_clicked = nil
					end
					
					
					self.node_hover = i
				end

				if self.node_clicked and self.node_clicked ~= i then
					replace_txt_color(self, self.node_clicked)
				end

				if action.pressed and action_id == hash("touch") then
					msg.post("/sfx#sfx", "button2-release")
					if i == 9 then
						gui.set(gui.get_node("flip_all-txt-top"), "position.y", self.text_y_pos[i]-1)
					else
						gui.set(self.top_text_nodes[i], "position.y", self.text_y_pos[i]-1)
					end
					self.node_clicked = i
				end
				
				if action.released and action_id == hash("touch") and self.node_clicked == i then -- click action
					if self.node_clicked == 9 then
						gui.set(gui.get_node("flip_all-txt-top"), "position.y", self.text_y_pos[self.node_clicked])
					else
						gui.set(self.top_text_nodes[self.node_clicked], "position.y", self.text_y_pos[self.node_clicked])
					end
					check_set(self, i, self.checked)
				end
			end
		end
		if not found_node then --lift text (moved off text)
			if self.node_hover then
				self.input_override = false
				if self.node_hover < 9 then
					gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((63/255), (63/255), (116/255), 1))
				else
					if self.node_hover == 9 then
						gui.set_color(self.top_text_nodes[11], vmath.vector4((91/255), (110/255), (225/255), 1))
						gui.set_color(self.top_text_nodes[12], vmath.vector4((91/255), (110/255), (225/255), 1))
					end
					gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((91/255), (110/255), (225/255), 1))
				end
				replace_txt_color(self, self.node_hover)
				self.node_hover = nil
			end
			if self.node_clicked then
				self.input_override = false
				if self.node_clicked == 9 then
					gui.set(gui.get_node("flip_all-txt-top"), "position.y", self.text_y_pos[self.node_clicked])
				else
					gui.set(self.top_text_nodes[self.node_clicked], "position.y", self.text_y_pos[self.node_clicked])
				end
				self.node_clicked = nil
			end
		end

		
		if self.se_up and gui.pick_node(self.se_hit, action.x, action.y) then -- se corner
			self.input_override = true
			if action.pressed and action_id == hash("touch") then --click
				msg.post("/sfx#sfx", "button2-depress")
				gui.set(self.se_top, "color.w", 0)
			elseif action.released and action_id == hash("touch") and gui.get(self.se_top, "color.w") == 0 then --release
				msg.post("/sfx#sfx", "button2-release")
				if not self.checked[1] and self.checked[2] and self.checked[3] and not self.checked[4] and not self.checked[5] and self.checked[6] and not self.checked[7] and self.checked[8] and self.checked[9] and not self.checked[10] then 
					gui.set(self.se_lit, "color.w", 0)
					self.se_up = false
					gui.play_flipbook(gui.get_node("cover"), "cover-raise")
					self.cover_up = true
					cover_noise(self)
					for i = 1,10 do
						if self.current_settings[i] ~= self.checked[i] then
							check_set(self, i, self.checked)
						end
					end
				else
					gui.set(self.se_top, "color.w", 1)
				end
			elseif gui.get(self.se_lit, "color.w") ~= 1 then --hover
				gui.set(self.se_lit, "color.w", 1)
				gui.play_flipbook(self.se_top, "corner")
			end
		elseif gui.get(self.se_lit, "color.w") == 1 then -- reset
			gui.set(self.se_lit, "color.w", 0)
			gui.play_flipbook(self.se_top, "corner-dark")
			if gui.get(self.se_top, "color.w") == 0 then
				gui.set(self.se_top, "color.w", 1)
			end
			self.input_override = false
		end

		if self.cover_up and gui.pick_node(gui.get_node("light-box"), action.x, action.y) then --light box
			self.input_override = true
			if action.pressed and action_id == hash("touch") then
				msg.post("/sfx#sfx", "switch")
				gui.set_color(gui.get_node("lightbulb-click"), vmath.vector4(1, 1, 1, 1))
			elseif action.released and action_id == hash("touch") and gui.get(gui.get_node("lightbulb-click"), "color.x") == 1 then
				msg.post("/sfx#sfx", "button2-release")
				self.cover_up = false
				gui.set(gui.get_node("lightbulb-click"), "color.w", 0)
				gui.set(gui.get_node("lightbulb"), "color.w", 0)
				msg.post("/gui#minefinder", "lightbulb_gotten")
				msg.post("/gui#door", "lightbulb_gotten")
				gui.play_flipbook(gui.get_node("cover"), "cover-lower", hide_cover)
			elseif gui.get(gui.get_node("lightbulb-click"), "color.w") == 0 then
				gui.set_color(gui.get_node("lightbulb-click"), vmath.vector4((203/255), (219/255), (252/255), 1))
			end
		elseif gui.get(gui.get_node("lightbulb-click"), "color.w") ~= 0 then
			gui.set(gui.get_node("lightbulb-click"), "color.w", 0)
			self.input_override = false
		end
	end

	if (action_id == hash("debug")) and action.pressed then
		print(self.anims_on)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

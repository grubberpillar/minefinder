local function replace_txt_color(self)
	if self.node_clicked < 9 then
		gui.set_color(self.text_nodes[self.node_clicked], vmath.vector4((142/255), (149/255), (219/255), 1))
	else
		gui.set_color(self.text_nodes[self.node_clicked], vmath.vector4((154/255), (186/255), (254/255), 1))
	end
	if self.node_clicked == 9 then
		gui.set_color(self.text_nodes[11], vmath.vector4((154/255), (186/255), (254/255), 1))
		gui.set_color(self.text_nodes[12], vmath.vector4((154/255), (186/255), (254/255), 1))
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.anims_on = true
	self.visible = false
	self.disabling = true --checks if the user just unchecked (true) or checked (false) a checkbox
	self.boxes = {"place", "rmv", "right", "wrong", "mines", "delay", "t.flip", "ui", "flip_all", "fast_flip"}
	self.hitbox_nodes = {}
	self.check_nodes = {}
	self.text_nodes = {}
	self.top_text_nodes = {}
	self.node_hover = nil
	self.node_clicked = nil
	
	for i = 1, 10 do
		self.hitbox_nodes[i] = gui.get_node(self.boxes[i] .. "-hitbox")
	end
	for i = 1, 10 do
		self.check_nodes[i] = gui.get_node(self.boxes[i] .. "-check")
	end
	for i = 1, 10 do
		self.text_nodes[i] = gui.get_node(self.boxes[i] .. "-txt")
	end
	self.text_nodes[9] = gui.get_node(self.boxes[9] .. "-txt-a")
	self.text_nodes[11] = gui.get_node(self.boxes[9] .. "-txt-b")
	self.text_nodes[12] = gui.get_node(self.boxes[9] .. "-txt-c")
	
	for i = 1, 10 do
		self.top_text_nodes[i] = gui.get_node(self.boxes[i] .. "-txt-top")
	end
	
	self.checked = {true, true, true, true, true, true, true, true, false, true}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("disable") then
		self.visible = false
		msg.post("#", "disable")
	elseif message_id == hash("enable") then
		self.visible = true
		msg.post("#", "enable")
	elseif message_id == hash("switch-clicked") then
		local check_frame
		if message.setting == true then
			check_frame = "check"
			if self.visible then
				check_frame = check_frame .. "-write"
			end
		else
			check_frame = "uncheck12"
		end
		for i = 1, 8 do
			if self.checked[i] ~= message.setting then
				self.checked[i] = message.setting
				gui.play_flipbook(self.check_nodes[i], check_frame)
			end
		end
	end
end

function on_input(self, action_id, action)
	local found_node = false
	for i = 1, 10 do 
		if gui.pick_node(self.hitbox_nodes[i], action.x, action.y) then -- all checkboxes
			found_node = true
			if self.node_hover ~= i then
				if self.node_hover then --lift text
					if self.node_hover < 9 then
						gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((63/255), (63/255), (116/255), 1))
					else
						gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((91/255), (110/255), (225/255), 1))
					end
				end
				
				gui.set_color(self.top_text_nodes[i], vmath.vector4(0, 0, 0, 0))--depress text
				self.node_hover = i
			end
			-- WIP - make selection box invisible

			if self.node_clicked and self.node_clicked ~= i then
				replace_txt_color(self)
			end

			if action_id == hash("touch") and action.pressed then
				gui.set_color(self.text_nodes[i], vmath.vector4(1, 1, 1, 1))
				if i == 9 then
					gui.set_color(self.text_nodes[11], vmath.vector4(1, 1, 1, 1))
					gui.set_color(self.text_nodes[12], vmath.vector4(1, 1, 1, 1))
				end
				self.node_clicked = i
			end
			
			if action.released and action_id == hash("touch") and self.node_clicked == i then
				replace_txt_color(self)
				local check_bool
				local check_int
				if self.checked[i] then --checking vars
					check_bool, check_int = false, -1
				else -- check
					check_bool, check_int = true, 1
				end
				
				if i == 8 then
					self.anims_on = check_bool
				end

				if self.checked[i] then 
					if self.anims_on then --uncheck
						gui.play_flipbook(self.check_nodes[i], "check-remove")
					else
						gui.play_flipbook(self.check_nodes[i], "uncheck12")
					end
				else -- check
					if self.anims_on then
						gui.play_flipbook(self.check_nodes[i], "check-write")
					else
						gui.play_flipbook(self.check_nodes[i], "check")
					end
				end
				
				self.checked[i] = check_bool
				if self.disabling == check_bool then
					self.disabling = not check_bool
					msg.post("/gui#minefinder", "switch_preference", {prefer_up = check_bool})
				end
				msg.post("/gui#minefinder", "update_switch", {diff = check_int, index = i})
				msg.post("/zoom#minefinder", "update_anims", {setting = check_bool, index = i})
				
			end
		end
	end
	if not found_node then --lift text
		if self.node_hover then
			if self.node_hover < 9 then
				gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((63/255), (63/255), (116/255), 1))
			else
				gui.set_color(self.top_text_nodes[self.node_hover], vmath.vector4((91/255), (110/255), (225/255), 1))
			end
			self.node_hover = nil
		end
		if self.node_clicked then
			replace_txt_color(self)
			self.node_clicked = nil
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

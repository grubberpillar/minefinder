local l_data = require "main.leveldata"
local l_board = require "main.leaderboard"

local function deep_copy(orig) --outside/unoriginal method
	local copy = {}
	for k, v in pairs(orig) do
		if type(v) == "table" then
			copy[k] = deep_copy(v)  -- Recursively copy nested tables
		else
			copy[k] = v  -- Copy primitive values
		end
	end
	return copy
end

local function deep_equal(t1, t2, visited) --outside/unoriginal method
	if t1 == t2 then
		return true
	end

	if type(t1) ~= "table" or type(t2) ~= "table" then
		return false
	end

	-- Prevent recursive loops from cyclic references
	visited = visited or {}
	if visited[t1] or visited[t2] then
		return visited[t1] == visited[t2]
	end
	visited[t1] = t2
	visited[t2] = t1

	-- Check if both tables have the same keys
	for k in pairs(t1) do
		if t2[k] == nil then
			return false
		end
	end
	for k in pairs(t2) do
		if t1[k] == nil then
			return false
		end
	end

	-- Recursively check table values
	for k, v in pairs(t1) do
		if not deep_equal(v, t2[k], visited) then
			return false
		end
	end

	return true
end

function pprint(tbl, indent) --outside/unoriginal method
	indent = indent or 0
	for k, v in pairs(tbl) do
		local formatting = string.rep("  ", indent) .. tostring(k) .. ": "
		if type(v) == "table" then
			print(formatting)
			pprint(v, indent + 1)
		else
			print(formatting .. tostring(v))
		end
	end
end

local function replace_char(str, index, new_char)
	local char_fin = new_char
	if new_char == " " then
		char_fin = "`"
	end
	return str:sub(1, index - 1) .. char_fin .. str:sub(index + 1)
end

local function char_at_loc(self, col, row, char, type)
	local full_string
	if type == "char" then
		full_string = gui.get_text(gui.get_node("txt-"..row.."-"..col))
	else
		full_string = gui.get_text(gui.get_node("title"))
	end
	if #full_string >= char then
		local loc_found = string.find(self.letters, string.sub(full_string, char,char))
		if loc_found then
			return loc_found-1
		else
			return 0
		end
	end
	-- if #full_string == 0 then
	-- 	gui.set_text(gui.get_node("txt-"..row.."-"..col), "    ")
	-- else
	-- 	gui.set_text(gui.get_node("txt-"..row.."-"..col), string.format("%-4s", full_string))
	-- end
	return 0
end

local function already_flipping(self, col, row, char, type)
	local node = gui.get_node(type.."-c"..char.."-"..row.."-"..col)
	for i, f in ipairs(self.flip_anim) do
		if f.anim_loc == node then
			return i
		end
	end
	return -1
end

local function time_txt(time)
	local txt = string.format("%02d:%02d", math.floor(time/60), time%60)
	return txt
end

local function random_person()
	local people = {{"NOAH", "noahISveryCOOLIO"}, {"COOL", "coolcoolcoolcool"}, {"ARJN", "hehastoomuchhair"}, {"YAEL", "yaelYAELyaelYAEL"}, {"KRIS", "mrkristophereiss"}, {"JAR", "evilEVILevilEVIL"}, {"A", "lazyahhpersonlol"}, {"DREW", "thissISjustMYdad"}, {"KATE", "dumbnannoyingsis"}, {"EVAN", "bigWINhesSOOcool"}, {"BOT", "BOTBOTBOTBOTBOTB"}}
	local rand = math.random(#people)
	return people[rand][1], people[rand][2]
end

local function random_person_plus()
	local people = {"NOAH", "COOL", "YAEL", "KRIS", "JAR", "A", "DREW", "KATE", "EVAN", "BOT", "AP", "CAT", "JAKE", "BOJ", "STEV", "X", "DOG", "ARJN", "LUUK", "ZIV", "MINE", "BOMB", "YN", "GRUB", "EP"}
	local rand = math.random(#people)
	return people[rand]
end

local function profane_check(str)
	if not l_data.settings.profanity then
		local profane = false
		local curse_loc = nil
		local i = 1
		while i <= #l_board.profanity and not profane do 
			if string.find(string.lower(str), l_board.profanity[i]) then
				profane = true
				curse_loc = string.find(string.lower(str), l_board.profanity[i])
			end
			i = i + 1
		end
		if profane then
			local oldstr = str.." "
			local cleanstr = string.sub(oldstr, 1, curse_loc)
			for c = curse_loc+1, 4 do
				if string.sub(oldstr, c, c) == " " then
					cleanstr = cleanstr.." "
				else
					cleanstr = cleanstr.."-"
				end
			end
			return cleanstr
		end
	end
	return str
end

local function flip_tile(self, input, col, row, type, flip_check)
	local iters = 4
	if type == "title" then
		iters = 13
	end
	for i = 1, iters do 
		local char = i
		local end_char, start_char
		if type ~= "num" then
			start_char = char_at_loc(self,col,row,char,type)
			if i <= #input then
				end_char = string.find(self.letters, string.sub(input, i,i))-1
			else
				end_char = 0
			end
			
		else
			local char_t = char+math.floor(i/3)
			local orig_num = gui.get_text(gui.get_node("num-"..row.."-"..col))

			if i <= #orig_num then
				local to_num = tonumber(string.sub(orig_num, char_t,char_t))
				if to_num then
					start_char = to_num
				else
					start_char = 10
				end
			else
				start_char = 10
			end

			if i <= #input then
				local to_num = tonumber(string.sub(input, char_t,char_t))
				if to_num then
					end_char = to_num
				else
					end_char = 10
				end
			else
				end_char = 10
			end
		end

		local is_flipping = -1
		if flip_check then
			is_flipping = already_flipping(self, col, row, char, type)
		end
		
		if is_flipping ~= -1 then
			self.flip_anim[is_flipping].fin = end_char
		else
			table.insert(self.flip_anim, {col = col, row = row, type = type, char = char, anim_loc = gui.get_node(type.."-c"..char.."-"..row.."-"..col), pos = start_char, fin = end_char, iter = 0}) --fin = string.find(self.allowed_chars, "I")
			-- if char == 1 or char == 11 then
			-- 	print(end_char)
			-- end
		end
	end
end

local function name_used(self, name)
	for i = 1, 5 do
		for j = 1, #l_board.lb_instance[i] do
			if l_board.lb_instance[i][j][1] == name and (l_board.lb_instance[i][j][3] ~= l_data.player_id and not (#l_board.lb_instance[i][j][3] < 16 and l_data.os == "web")) then
				return true
			end
		end
	end
	return false
end

local function name_higher(self, name)
	local i = self.entering_name
	for j = 1, #l_board.lb_instance[i] do
		if l_board.lb_instance[i][j][1] == name then
			print(i.." "..name)
			if #l_board.lb_instance[i][j][3] < 16 and l_board.lb_instance[i][j][2] <= l_data.highscore[i] then
				print("return yes")
				return true
			else
				print(l_board.lb_instance[i][j][3], l_board.lb_instance[i][j][2], l_data.highscore[i])
			end
		end
	end
	return false
end

local function allowed_name(self, name)
	if name == "" then
		gui.set_text(gui.get_node("error-txt"), "CANT USE THIS NAME")
		return false
	elseif name == "TZXQ" and self.shifting then
		return true
	elseif name_used(self, name) then
		gui.set_text(gui.get_node("error-txt"), "NAME IS IN USE")
		return false
	elseif l_data.os == "web" and name_higher(self, name) then
		gui.set_text(gui.get_node("error-txt"), "SCORE TOO LOW~")
		return false
	else
		for i,s in ipairs(l_board.banned) do
			if string.find(string.lower(name), s) then
				gui.set_text(gui.get_node("error-txt"), "CANT USE THIS NAME")
				return false
			end
		end
	end
	print("good")
	return true
end

local function make_id(self)
	local id = ""
	for i = 1,16 do 
		local rand = math.random(26)
		local upper = math.random(2)
		local char = string.sub(self.allowed_chars, rand, rand) 
		if upper == 1 then 
			char = string.lower(char)
		end 
		id = id..char
	end
	return id
end

local function print_leaderboard(self)
	for i = 1, 5 do
		for j = 1, 10 do
			if l_board.lb_instance[i][j] == nil then
				gui.set_text(gui.get_node("txt-"..j.."-"..i), "")
				gui.set_text(gui.get_node("num-"..j.."-"..i), "")
			else
				if l_board.lb_instance[i][j][3] == l_data.player_id then
					gui.set_color(gui.get_node("txt-"..j.."-"..i), vmath.vector4(1, 1, (200/255), 1))
				elseif l_board.lb_instance[i][j][1] == "FLEA" then
					gui.set_color(gui.get_node("txt-"..j.."-"..i), vmath.vector4((183/255), (146/255), (61/255), 1))
				elseif #l_board.lb_instance[i][j][3] < 5 then
					gui.set_color(gui.get_node("txt-"..j.."-"..i), vmath.vector4((210/255), (217/255), (221/255), 1))
				elseif gui.get_color(gui.get_node("txt-"..j.."-"..i)) ~= vmath.vector4(1, 1, 1, 1) then
					gui.set_color(gui.get_node("txt-"..j.."-"..i), vmath.vector4(1, 1, 1, 1))
				end
				gui.set_text(gui.get_node("txt-"..j.."-"..i), profane_check(l_board.lb_instance[i][j][1]))
				gui.set_text(gui.get_node("num-"..j.."-"..i), time_txt(l_board.lb_instance[i][j][2]))
			end
		end
	end
end

local function true_len(self, str)
	if str == nil then
		return 0
	end
	for c = 1, #str do
		if not string.find(self.letters_true, string.sub(str, c,c)) then
			return c-1
		end
	end
	return 4
end

local function flip_leaderboard(self, first_flip)
	for i = 1, 5 do
		for j = 1, 10 do
			local text_loc = gui.get_node("txt-"..j.."-"..i)
			if l_board.lb_instance[i][j] == nil then
				gui.set_text(text_loc, "")
				gui.set_text(gui.get_node("num-"..j.."-"..i), "")
			else
				local newcolor = nil
				if l_board.lb_instance[i][j][3] == l_data.player_id then
					newcolor = vmath.vector4(1, 1, (200/255), 1)
				elseif l_board.lb_instance[i][j][1] == "FLEA" then
					newcolor = vmath.vector4((183/255), (146/255), (61/255), 1)
				elseif #l_board.lb_instance[i][j][3] < 5 then
					newcolor =  vmath.vector4((210/255), (217/255), (221/255), 1)
				elseif gui.get_color(text_loc) ~= vmath.vector4(1, 1, 1, 1) then
					newcolor = vmath.vector4(1, 1, 1, 1)
				end

				if newcolor then
					if l_data.gui_anims then
						table.insert(self.color_change, 1, {loc = text_loc, color = newcolor, iter = 0})
					else
						gui.set_color(text_loc, newcolor)
					end
				end

				local input = profane_check(l_board.lb_instance[i][j][1])
				local txt_len = true_len(gui.get_text(text_loc))
				if string.sub(gui.get_text(text_loc), 0, txt_len) ~= input then
					if not l_data.gui_anims then
						gui.set_text(text_loc, input)
					else
						-- print(i, j)
						-- print(string.format("|%-s| v |%-s|", string.sub(gui.get_text(text_loc), 0, #input), input))

						local col = i
						local row = j
						local type = "char"
						
						flip_tile(self, input, col, row, type, not first_flip)
					end
				end

				local num_loc = gui.get_node("num-"..j.."-"..i)
				input = time_txt(l_board.lb_instance[i][j][2])
				
				if gui.get_text(num_loc) ~= input then
					if not l_data.gui_anims then
						gui.set_text(num_loc, input)
					else
						-- print(i, j)
						-- print(string.format("|%-s| v |%-s|", gui.get_text(num_loc), input))

						local col = i
						local row = j
						local type = "num"

						flip_tile(self, input, col, row, type, not first_flip)
					end
				end
			end
		end
	end
end

local function leaderboard_bootup(self)
	self.connected = true

	if l_data.gui_anims then
		local input = " LEADERBOARD"
		flip_tile(self, input, 1, 1, "title", true)
		table.insert(self.color_change, 1, {loc = gui.get_node("title"), color = vmath.vector4(1, 1, 1, 1), iter = 0})
	else
		gui.set_color(gui.get_node("title"), vmath.vector4(1, 1, 1, 1))
		gui.set_text(gui.get_node("title"), "`LEADERBOARD")
	end

	if l_data.player_id == nil then
		local id = make_id(self)
		print(id)
		l_data.player_id = id
	end

	for i = 1,5 do
		gui.set_color(gui.get_node("diff-circle"..i), self.diff_colors[i])
		if i == 5 then
			gui.play_flipbook(gui.get_node("face5"), "insane-face-on")
		end
	end
end

local function leaderboard_shutdown(self)
	self.failed_connection = true
	msg.post("/settings#settings", "world-flash")

	if l_data.gui_anims then
		local input = "NO CONNECTION"
		flip_tile(self, input, 1, 1, "title", true)
		table.insert(self.color_change, 1, {loc = gui.get_node("title"), color = vmath.vector4((217/255), (87/255), (99/255), 1), iter = 0})
	else
		gui.set_color(gui.get_node("title"), vmath.vector4((217/255), (87/255), (99/255), 1))
		gui.set_text(gui.get_node("title"), "NO CONNECTION")
	end

	if self.connected then
		self.connected = false
		for i = 1,5 do
			gui.play_flipbook(gui.get_node("diff-light"..i), "small-light-off")
			gui.play_flipbook(gui.get_node("submit-"..i.."-top"), "submit-off")
			gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4((105/255), (106/255), (106/255), 1))
			gui.set_color(gui.get_node("diff-circle"..i), vmath.vector4(1, 1, 1, 1))
			if i == 5 then
				gui.play_flipbook(gui.get_node("face5"), "insane-face")
			end
		end
	end
	if l_data.gui_anims then
		flip_leaderboard(self, false)
	else
		print_leaderboard(self)
	end

	gui.set(gui.get_node("error-txt"), "color.w", 1)
	gui.set_text(gui.get_node("error-txt"), "~USING SAVED TIMES")

	for d = 1,5 do
		for j = 1, #l_board.lb_instance[d] do
			if l_board.lb_instance[d][j][3] ~= l_data.player_id then
				if l_data.gui_anims then
					table.insert(self.color_change, 1, {loc = gui.get_node("txt-"..j.."-"..d), row = j, col = d, color = vmath.vector4((203/255), (219/255), (252/255), 1), iter = 0})
				else
					gui.set_color(gui.get_node("txt-"..j.."-"..d), vmath.vector4((203/255), (219/255), (252/255), 1))
				end
			end
		end
	end
end

local function handle_response(self, id, response)
	print("connected")
	print(response.status, ";", response.response)
	print(type(response.response))


	if response.status == 0 then
		leaderboard_shutdown(self)
	elseif response.response == "true" then
		leaderboard_bootup(self) --https://minefinder.andrewprock.link
		http.request(l_data.server.."/lb_sort", "GET", handle_response)
		http.request(l_data.server.."/profanity", "GET", handle_response)
		http.request(l_data.server.."/banned", "GET", handle_response)
	else
		local data = json.decode(response.response)
		if data.leaderboard then
			for d = 1,5 do
				for i,l in ipairs(data.leaderboard[d]) do
					l_board.lb_instance[d][i] = {l[2], l[1], l[3]}
				end
				for i = #data.leaderboard[d]+1, 10 do
					l_board.lb_instance[d][i] = nil
				end
			end
			flip_leaderboard(self, false)

			if l_data.os == "web" and self.web_board_storage then
				-- print("web storage "..self.web_board_storage)
				l_data.web_hs_storage[self.web_board_storage] = l_data.highscore[self.web_board_storage]
				self.web_board_storage = nil
				msg.post("/zoom#minefinder", "save_game_msg")
			end
			
			self.hs_submittable = {false, false, false, false, false}
			for i = 1,5 do
				-- print(i)
				if l_data.highscore[i] ~= nil and #l_board.lb_instance[i] == 0 then
					self.hs_submittable[i] = true
					-- print(i.."a")
				elseif #l_board.lb_instance[i] > 0 and l_data.highscore[i] and (#l_board.lb_instance[i] < 10 or l_data.highscore[i] < l_board.lb_instance[i][10][2]) then
					self.hs_submittable[i] = true
					-- print(i.."b")
				-- elseif l_data.highscore[i] then
				-- 	print(i .." ".. l_data.highscore[i], l_board.lb_instance[i][#l_board.lb_instance[i]][2])
				end
				local j = 1
				local set_hs = nil
				while j <= #l_board.lb_instance[i] and not set_hs do
					if l_board.lb_instance[i][j][3] == l_data.player_id then
						set_hs = l_board.lb_instance[i][j][2]
					end
					j = j + 1
				end
				if l_data.highscore[i] and l_data.highscore[i] >= 6000 then
					self.hs_submittable[i] = false
					-- print(i.."c")
				elseif set_hs and (l_data.highscore[i] == nil or (set_hs <= l_data.highscore[i])) then
					self.hs_submittable[i] = false
					-- print(i.."d")
				-- elseif l_data.os == "web" and l_data.highscore[i] and l_data.web_hs_storage[i] and l_data.highscore[i] >= l_data.web_hs_storage[i]  then 
				-- 	self.hs_submittable[i] = false
					-- print(i.."e")
				end
				if self.hs_submittable[i] then
					gui.play_flipbook(gui.get_node("diff-light"..i), "small-light-green")
					gui.play_flipbook(gui.get_node("submit-"..i.."-top"), "submit-on")
					gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
					if l_data.os == "web" and l_data.highscore[i] and l_data.web_hs_storage[i] and l_data.highscore[i] >= l_data.web_hs_storage[i] then
						gui.play_flipbook(gui.get_node("submit-"..i.."-top"), "submit-on1")
					end 
				else
					gui.play_flipbook(gui.get_node("diff-light"..i), "small-light-red")
					gui.play_flipbook(gui.get_node("submit-"..i.."-top"), "submit-off")
					gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4((105/255), (106/255), (106/255), 1))
				end
			end
		elseif data.profanity then
			print("profanity updated")
			l_board.profanity = deep_copy(data.profanity)
		elseif data.banned then
			print("banned updated")
			l_board.banned = deep_copy(data.banned)
		end
	end
end

local function ping_server(msg, type)
	http.request(l_data.server..msg, type, handle_response)
end

local function pull_board(self)
	print("connecting...")
	ping_server("/lb_sort", "GET")
end

local function send_name(self, diff, name, time, id)
	print("sending...")
	ping_server("/save/"..diff.."/"..name.."/"..time.."/"..id.."", "PUT")
end

local function test_connection(self)
	print("testing...")
	ping_server("/test_connection", "GET")
end

function init(self)
	gui.set_render_order(8)
	self.hs_submittable = {false, false, false, false, false}
	self.entering_name = nil
	self.allowed_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	self.letters = " ABCDEFGHIJKLMNOPQRSTUVWXYZ-*"
	self.letters_vis = "`ABCDEFGHIJKLMNOPQRSTUVWXYZ-"
	self.letters_true = "ABCDEFGHIJKLMNOPQRSTUVWXYZ-"
	self.numbers_vis = "0123456789`"
	self.diff_colors = {vmath.vector4((55/255), (148/255), (110/255), 1), vmath.vector4((153/255), (229/255), (80/255), 1), vmath.vector4((251/255), (242/255), (54/255), 1), vmath.vector4((223/255), (113/255), (38/255), 1), vmath.vector4((217/255), (87/255), (99/255), 1)}
	self.name_char_delay = {nil,nil,nil,nil}
	self.flip_anim = {}
	self.flip_change = {char = {}, num = {}}
	self.change_template = {}
	self.title_change_template = {{}}
	self.col_change = {}
	self.color_change = {}
	self.web_board_storage = nil
	self.buttons_flashing = false
	self.buttons_lit = false
	self.buttons_timer = 0
	
	for c = 1, 5 do --text change array setup
		table.insert(self.change_template, {})
		for r = 1, 10 do
			table.insert(self.change_template[c], {})
			for i = 1, 4 do
				self.change_template[c][r][i] = nil
			end
			self.change_template[c][r][5] = false
		end
	end
	
	table.insert(self.title_change_template, {}) --title change array setup
	table.insert(self.title_change_template[1], {})
	for i = 1, 13 do
		self.title_change_template[1][1][i] = nil
	end
	self.title_change_template[1][1][14] = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		msg.post(".", "acquire_input_focus")
		self.connected = false
		self.failed_connection = false
		self.buttons_flashing = false

		if l_data.gui_anims then
			gui.set_text(gui.get_node("title"), "")
			local input = " CONNECTING*"
			flip_tile(self, input, 1, 1, "title", false)
			table.insert(self.color_change, 1, {loc = gui.get_node("title"), color = vmath.vector4((203/255), (219/255), (252/255), 1), iter = 0})
		else
			gui.set_color(gui.get_node("title"), vmath.vector4((203/255), (219/255), (252/255), 1))
			gui.set_text(gui.get_node("title"), "`CONNECTING-")
		end
		
		for i = 1, 5 do
			for j = 1, 10 do
				gui.set_text(gui.get_node("txt-"..j.."-"..i), "")
				gui.set_text(gui.get_node("num-"..j.."-"..i), "")
			end
		end

		gui.set(gui.get_node("error-txt"), "color.w", 0)
		
		for i = 1,5 do 
			gui.play_flipbook(gui.get_node("diff-light"..i), "small-light-off")
			gui.play_flipbook(gui.get_node("submit-"..i.."-top"), "submit-off")
			gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4((105/255), (106/255), (106/255), 1))
			gui.set_color(gui.get_node("diff-circle"..i), vmath.vector4(1, 1, 1, 1))
			if i == 5 then
				gui.play_flipbook(gui.get_node("face5"), "insane-face")
			end
		end


		test_connection(self)
	elseif message_id == hash("disable") then
		msg.post(".", "release_input_focus")
		if self.entering_name then
			gui.play_flipbook(gui.get_node("diff-light"..self.entering_name), "small-light-green")
			gui.set_text(gui.get_node("name-txt"), "")
			for j = 1,5 do 
				if self.hs_submittable[j] then
					gui.play_flipbook(gui.get_node("submit-"..j.."-top"), "submit-on")
					gui.set_color(gui.get_node("submit-"..j.."-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
					if l_data.os == "web" and l_data.highscore[j] and l_data.web_hs_storage[j] and l_data.highscore[j] >= l_data.web_hs_storage[j] then
						gui.play_flipbook(gui.get_node("submit-"..j.."-top"), "submit-on1")
					end 
				end
			end
			gui.set_color(gui.get_node("accept-bg"), vmath.vector4((59/255), (59/255), (59/255), 1))
			gui.set_color(gui.get_node("cancel-bg"), vmath.vector4((59/255), (59/255), (59/255), 1))
			gui.set_color(gui.get_node("accept-top"), vmath.vector4((38/255), (38/255), (38/255), 1))
			gui.set_color(gui.get_node("cancel-top"), vmath.vector4((38/255), (38/255), (38/255), 1))
			gui.play_flipbook(gui.get_node("name-insert-light"), "small-light-lit-on")
			self.entering_name = nil

			if self.error_msg then
				gui.set(gui.get_node("error-txt"), "color.w", 0)
				self.error_msg = false
			end
		end

		--finish color changes
		if #self.color_change > 0 then
			for i = #self.color_change, 1, -1 do
				gui.set_color(self.color_change[i].loc, self.color_change[i].color)
				table.remove(self.color_change, i)
			end
		end
		
		--clear any active tile anims
		for i = #self.flip_anim, 1, -1 do
			gui.play_flipbook(self.flip_anim[i].anim_loc, "nothing")
			table.remove(self.flip_anim, i)
		end
	elseif message_id == hash("profanity_switch") then
		if l_data.viewing_hs then
			if l_data.gui_anims then
				flip_leaderboard(self)
			else
				print_leaderboard(self)
			end
		end
	end
end

function on_input(self, action_id, action)
	if l_data.viewing_hs then
		if not self.connected and not self.failed_connection then
			if action.pressed and action_id == hash("y-key") then
				leaderboard_bootup(self)
			end
			if action.pressed and action_id == hash("n-key") then
				leaderboard_shutdown(self)
			end
		elseif self.connected then
			for i = 1,5 do --submit buttons
				if not self.entering_name and self.hs_submittable[i] and gui.pick_node(gui.get_node("submit-"..i.."-hit"), action.x, action.y) then
					if action.pressed and action_id == hash("touch") then --click
						msg.post("/sfx#sfx", "quick_play", {sound = 10})
						gui.set(gui.get_node("submit-"..i.."-top"), "position.y", 0)
					elseif action.released and action_id == hash("touch") and gui.get(gui.get_node("submit-"..i.."-top"), "position.y") == 0 then --release
						msg.post("/sfx#sfx", "quick_play", {sound = 13})
						self.entering_name = i
						gui.set(gui.get_node("submit-"..i.."-top"), "position.y", 1)
						for j = 1,5 do 
							if self.hs_submittable[j] then
								gui.play_flipbook(gui.get_node("submit-"..j.."-top"), "submit-off")
								gui.set_color(gui.get_node("submit-"..j.."-bg"), vmath.vector4((105/255), (106/255), (106/255), 1))
							end

							if j ~= self.entering_name then
								gui.set_color(gui.get_node("diff-circle"..j), vmath.vector4((79/255), (76/255), (74/255), 1))
								if j == 5 then
									gui.play_flipbook(gui.get_node("face5"), "insane-face-off")
								end
							end
						end
						if l_data.gui_anims then
							for c = 1, #l_data.default_name do
								gui.play_flipbook(gui.get_node("name-box-"..c), "single-flip")
							end
						end
						
						gui.set_text(gui.get_node("name-txt"), l_data.default_name)
						gui.play_flipbook(gui.get_node("diff-light"..i), "small-light-blue")
						gui.set_color(gui.get_node("accept-bg"), vmath.vector4((153/255), (229/255), (80/255), 1))
						gui.set_color(gui.get_node("cancel-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
						gui.set_color(gui.get_node("accept-top"), vmath.vector4((106/255), (190/255), (48/255), 1))
						gui.set_color(gui.get_node("cancel-top"), vmath.vector4((172/255), (50/255), (50/255), 1))
						self.buttons_flashing = true
						gui.play_flipbook(gui.get_node("name-insert-light"), "green-flash")
					elseif gui.get(gui.get_node("submit-"..i.."-bg"), "color") ~= vmath.vector4(1, 1, 1, 1) then --hover
						gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4(1, 1, 1, 1))
					end
				elseif gui.get(gui.get_node("submit-"..i.."-bg"), "color") == vmath.vector4(1, 1, 1, 1) then -- reset
					gui.set_color(gui.get_node("submit-"..i.."-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
					gui.set(gui.get_node("submit-"..i.."-top"), "position.y", 1)
				end
			end

			if action_id == hash("enter") then
				if action.pressed then
					self.enter_down = true
				elseif action.released then
					self.enter_down = false
				end
			end

			if action_id == hash("escape") then
				if action.pressed then
					self.escape_down = true
				elseif action.released then
					self.escape_down = false
				end
			end

			if self.entering_name then
				local buttons = {"accept", "cancel"}
				for i,k in ipairs(buttons) do --name set/cancel
					if gui.pick_node(gui.get_node(k.."-hit"), action.x, action.y) or (i == 1 and action_id == hash("enter")) or (i == 2 and action_id == hash("esc")) then --set new name
						if action.pressed and (action_id == hash("touch") or ((i == 1 and action_id == hash("enter")) or (i == 2 and action_id == hash("esc")))) then --click
							msg.post("/sfx#sfx", "quick_play", {sound = 19})
							gui.set(gui.get_node(k.."-top"), "position.y", 0)
						elseif action.released and (action_id == hash("touch") or (i == 1 and action_id == hash("enter")) or (i == 2 and action_id == hash("esc"))) and gui.get(gui.get_node(k.."-top"), "position.y") == 0 then --release
							msg.post("/sfx#sfx", "quick_play", {sound = 13})
							gui.set(gui.get_node(k.."-top"), "position.y", 1)
							local set_name = gui.get_text(gui.get_node("name-txt"))
							if i == 1 and not allowed_name(self, set_name)then 
								gui.set(gui.get_node("error-txt"), "color.w", 1)
								self.error_msg = true
							else
								if i == 1 then --submit high score
									gui.play_flipbook(gui.get_node("diff-light"..self.entering_name), "small-light-red")
									self.hs_submittable[self.entering_name] = false
									l_data.default_name = set_name
									
									local player_hs = l_data.highscore[self.entering_name]
									local player_name = l_data.default_name
									local player_id = l_data.player_id
									if l_data.os == "web" then
										player_id = player_name
										self.web_board_storage = self.entering_name
									end
									if player_name == "TZXQ" and self.shifting then
										player_name = "FLEA"
										player_id = "aakencinfosmfiem"
									end

									send_name(self, self.entering_name, player_name, player_hs, player_id)

								else --cancel name
									gui.play_flipbook(gui.get_node("diff-light"..self.entering_name), "small-light-green")
								end

								if l_data.gui_anims then
									for c = 1, #set_name do
										local char_removed = string.sub(set_name, c,c)
										gui.set_text(gui.get_node("box-txt-".. c), char_removed)
										gui.play_flipbook(gui.get_node("name-box-"..c), "single-flip-back")
										self.name_char_delay[c] = 0.06
									end
									self.timer_override = true
								end
								
								gui.set_text(gui.get_node("name-txt"), "")
								for j = 1,5 do 
									if self.hs_submittable[j] then
										gui.play_flipbook(gui.get_node("submit-"..j.."-top"), "submit-on")
										gui.set_color(gui.get_node("submit-"..j.."-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
										if l_data.os == "web" and l_data.highscore[j] and l_data.web_hs_storage[j] and l_data.highscore[j] >= l_data.web_hs_storage[j] then
											gui.play_flipbook(gui.get_node("submit-"..j.."-top"), "submit-on1")
										end 
									end
									if j ~= self.entering_name then
										gui.set_color(gui.get_node("diff-circle"..j), self.diff_colors[j])
										if j == 5 then
											gui.play_flipbook(gui.get_node("face5"), "insane-face-on")
										end
									end
								end
								gui.set_color(gui.get_node("accept-bg"), vmath.vector4((59/255), (59/255), (59/255), 1))
								gui.set_color(gui.get_node("cancel-bg"), vmath.vector4((59/255), (59/255), (59/255), 1))
								gui.set_color(gui.get_node("accept-top"), vmath.vector4((38/255), (38/255), (38/255), 1))
								gui.set_color(gui.get_node("cancel-top"), vmath.vector4((38/255), (38/255), (38/255), 1))
								gui.play_flipbook(gui.get_node("name-insert-light"), "small-light-lit-on")
								self.buttons_flashing = false
								self.entering_name = nil
								
								if self.error_msg then
									gui.set(gui.get_node("error-txt"), "color.w", 0)
									self.error_msg = false
								end
							end
							
						elseif gui.get(gui.get_node(k.."-bg"), "color") ~= vmath.vector4(1, 1, 1, 1) and not ((i == 1 and self.enter_down) or (i == 2 and self.escape_down)) then --hover
							gui.set_color(gui.get_node(k.."-bg"), vmath.vector4(1, 1, 1, 1))
						end
					elseif gui.get(gui.get_node(k.."-bg"), "color") == vmath.vector4(1, 1, 1, 1) and not ((i == 1 and self.enter_down) or (i == 2 and self.escape_down)) then -- reset
						if i == 1 then
							gui.set_color(gui.get_node(k.."-bg"), vmath.vector4((153/255), (229/255), (80/255), 1))
						else
							gui.set_color(gui.get_node(k.."-bg"), vmath.vector4((217/255), (87/255), (99/255), 1))
						end
						gui.set(gui.get_node(k.."-top"), "position.y", 1)
					end
				end

				if action_id == hash("typing") then
					local input_char = string.upper(action.text)
					local txt_box = gui.get_node("name-txt")
					local old_txt = gui.get_text(txt_box)
					if input_char ~= "." and input_char ~= "]" and input_char ~= "[" and string.find(self.allowed_chars, input_char) and #old_txt < 4 then
						local new_txt = old_txt .. input_char
						local char_loc = #new_txt
						if l_data.gui_anims then
							gui.play_flipbook(gui.get_node("name-box-"..char_loc), "single-flip")
						end
						gui.set_text(txt_box, new_txt)
						msg.post("/sfx#sfx", "quick_play", {sound = 4})

						if self.name_char_delay[char_loc] then
							gui.set_text(gui.get_node("box-txt-"..char_loc), "")
							self.name_char_delay[char_loc] = nil
						end

						if self.error_msg then
							gui.set(gui.get_node("error-txt"), "color.w", 0)
							self.error_msg = false
						end
					end
				end

				if action.pressed and action_id == hash("del") then
					local txt_box = gui.get_node("name-txt")
					local old_txt = gui.get_text(txt_box)
					local char_loc = #old_txt
					if char_loc > 0 then
						msg.post("/sfx#sfx", "quick_play", {sound = 4})
						local new_txt = string.sub(old_txt, 1, char_loc-1)
						local char_removed = string.sub(old_txt, char_loc)
						if l_data.gui_anims then
						gui.set_text(gui.get_node("box-txt-".. char_loc), char_removed)
						gui.play_flipbook(gui.get_node("name-box-"..char_loc), "single-flip-back")
						self.name_char_delay[char_loc] = 0.06
					end
					
					gui.set_text(txt_box, new_txt)
				end
				

					
					if self.error_msg then
						gui.set(gui.get_node("error-txt"), "color.w", 0)
						self.error_msg = false
					end
				end
			end
		end
		if action.pressed and action_id == hash("minus") then
			msg.post("/zoom#minefinder", "scale_down")
		end

		if action.pressed and action_id == hash("plus") then
			msg.post("/zoom#minefinder", "scale_up")
		end

		if action_id == hash("shift") then
			if action.pressed then
				self.shifting = true
			elseif action.released then
				self.shifting = false
			end
		end	
		
-- 		if action.pressed and action_id == hash("debug") then
-- 			-- local rand_diff = math.random(5) --one new hs in background
-- 			-- local other_player_hs = math.random(600)
-- 			-- local other_player_name, other_player_id = random_person()
-- 			-- table.insert(l_board.global_highscore[rand_diff], {other_player_name, other_player_hs, other_player_id})
-- 			-- print("new highscore by "..other_player_name.." (diff: "..rand_diff..")")
-- 
-- 			-- if self.connected then
-- 			-- 	local name_store = l_data.default_name --quickly populate leaderboard
-- 			-- 	l_data.default_name = "RAND"
-- 			-- 	for i = 1, 5 do
-- 			-- 		for j = 1, 6 do
-- 			-- 			update_board(self, i)
-- 			-- 		end
-- 			-- 	end
-- 			-- 	l_data.default_name = name_store
-- 			-- end
-- 			
-- 			-- local input = time_txt(math.random(1200))
-- 			-- print(input)
-- 			-- local col = 1
-- 			-- local row = 1
-- 			-- local type = "num"
-- 			-- flip_tile(self, input, col, row, type, true)
-- 			pprint(l_data.web_hs_storage)
-- 			pprint(l_data.highscore)
-- 		end
-- 		if action.pressed and action_id == hash("debug2") then
-- 			
-- 			test_connection(self)
-- 		end
	end
end

function update(self, dt)
	if l_data.viewing_hs then
		if self.entering_name or self.timer_override then
			for c = 1,4 do
				if self.name_char_delay[c] then
					if self.name_char_delay[c] <= 0 then
						gui.set_text(gui.get_node("box-txt-"..c), "")
						self.name_char_delay[c] = nil
						if self.timer_override then
							if self.name_char_delay[c+1] then
								self.timer_override = true
							else
								self.timer_override = false
							end
						end
					else
						self.name_char_delay[c] = self.name_char_delay[c] - dt
					end
				end
			end
		end

		if self.buttons_flashing then
			self.buttons_timer = self.buttons_timer + dt
			if self.buttons_timer >= 0.25 then
				self.buttons_timer = self.buttons_timer - 0.25

				self.buttons_lit = not self.buttons_lit

				if self.buttons_lit then
					gui.set_color(gui.get_node("accept-top"), vmath.vector4((153/255), (229/255), (80/255), 1))
					gui.set_color(gui.get_node("cancel-top"), vmath.vector4((217/255), (87/255), (99/255), 1))
				else
					gui.set_color(gui.get_node("accept-top"), vmath.vector4((106/255), (190/255), (48/255), 1))
					gui.set_color(gui.get_node("cancel-top"), vmath.vector4((172/255), (50/255), (50/255), 1))
				end
			end
		end
		

		if #self.flip_anim > 0 then
			if not self.flip_delay then
				self.flip_delay = 0.176-dt
			elseif self.flip_delay <= 0 then
				self.flip_delay = 0.176-dt
				self.flip_change = {char = deep_copy(self.change_template), num = deep_copy(self.change_template), title = deep_copy(self.change_template)}
				self.col_change =  {char = {false,false,false,false,false}, num = {false,false,false,false,false}, title = {false}}
				local removed_anims = {}
				local numchanges = 0

				if #self.color_change > 0 then
					for i = #self.color_change, 1, -1 do
						local type = "char"

						if self.color_change[i].iter == 0 then
							self.color_change[i].iter = 1
							if l_data.gui_anims and self.color_change[i].row then
								for c = 1, 4 do
									local color_flip = gui.get_node(type.."-c"..c.."-"..self.color_change[i].row.."-"..self.color_change[i].col)
									gui.play_flipbook(color_flip, "flip-start")
									numchanges = numchanges + 1
								end
							end
						else
							gui.set_color(self.color_change[i].loc, self.color_change[i].color)
							if l_data.gui_anims and self.color_change[i].row then
								for c = 1, 4 do
									local color_flip = gui.get_node(type.."-c"..c.."-"..self.color_change[i].row.."-"..self.color_change[i].col)
									gui.play_flipbook(color_flip, "flip-end")
									numchanges = numchanges + 1
								end
							end
							table.remove(self.color_change, i)
						end
					end
				end

				for i, f in ipairs(self.flip_anim) do
					if f.pos ~= f.fin then
						if f.iter ~= 0 then --advance char
							if f.type ~= "num" then
								f.pos = (f.pos + 1)%28
								self.flip_change[f.type][f.col][f.row][f.char] = string.sub(self.letters_vis, f.pos+1,f.pos+1)
							else
								f.pos = (f.pos + 1)%11
								self.flip_change["num"][f.col][f.row][f.char] = string.sub(self.numbers_vis, f.pos+1,f.pos+1)
							end

							local bool_loc = 5
							if f.type == "title" then
								bool_loc = 14
							end
							if not self.flip_change[f.type][f.col][f.row][bool_loc] then
								self.flip_change[f.type][f.col][f.row][bool_loc] = true
								if not self.col_change[f.type][f.col] then
									self.col_change[f.type][f.col] = true
								end
							end
						end

						if f.iter == 0 then --flip anim
							gui.play_flipbook(f.anim_loc, "flip-start")
						elseif f.pos == f.fin then
							gui.play_flipbook(f.anim_loc, "flip-end")
							f.iter = -1
						else
							gui.play_flipbook(f.anim_loc, "flip-series")
						end
						
						f.iter = f.iter + 1
					else
						table.insert(removed_anims, i)
						if not (f.iter == -1 or f.iter == 0) then
							gui.play_flipbook(f.anim_loc, "nothing")
						end
					end
				end

				for i = #removed_anims, 1, -1 do
					table.remove(self.flip_anim, removed_anims[i])
				end

				local f_types = {"char", "num"}
				local f_id = {"txt", "num"}
				
				for t,f in ipairs(f_types) do --printing all accumulated change
					for c = 1,5 do
						if self.col_change[f][c] then
							for r = 1,10 do
								if self.flip_change[f][c][r][5] then
									local fin_str = ""
									local str_loc = gui.get_node(f_id[t].."-"..r.."-"..c)
									local start_str = gui.get_text(str_loc)
									for i = 1,4 do
										local char_t = i 
										
										if f == "num"then
											if i == 3 then
												fin_str = fin_str..":"
											end
											char_t = i+math.floor(i/3)
										end
										
										if self.flip_change[f][c][r][i] then
											fin_str = fin_str..self.flip_change[f][c][r][i]
											numchanges = numchanges + 1
										else
											fin_str = fin_str..string.sub(start_str, char_t,char_t)
										end
									end
									if fin_str == "``:``" then
										fin_str = ""
									end
									gui.set_text(str_loc, fin_str)
								end
							end
						end
					end
				end


				if self.col_change["title"][1] then --print change to title
					local t = "title"
					if self.flip_change[t][1][1][14] then
						local fin_str = ""
						local str_loc = gui.get_node(t)
						local start_str = gui.get_text(str_loc)
						for i = 1,13 do
							local char_t = i 

							if self.flip_change[t][1][1][i] then
								fin_str = fin_str..self.flip_change[t][1][1][i]
								numchanges = numchanges + 1
							else
								local addition = string.sub(start_str, char_t,char_t)
								if addition == "" then
									addition = "`"
								end
								fin_str = fin_str..addition
							end
						end
						gui.set_text(str_loc, fin_str)
					end
				end

				if numchanges > 40 then --heavy tile flip
					msg.post("/sfx#sfx", "quick_play", {sound = 7})
				elseif numchanges > 10 then --medium tile flip
					msg.post("/sfx#sfx", "quick_play", {sound = 6})
				elseif numchanges > 2 then --light tile flip
					msg.post("/sfx#sfx", "quick_play", {sound = 5})
				else --single tile flip
					msg.post("/sfx#sfx", "quick_play", {sound = 4})
				end
			else
				self.flip_delay = self.flip_delay-dt
			end
		end
	end
end
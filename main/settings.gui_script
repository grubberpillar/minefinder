local l_data = require "main.leveldata"

local function bool_to_num(bool)
	if bool then
		return 1
	else
		return 2
	end
end

local function bool_to_word(bool)
	if bool then
		return "on"
	else
		return "off"
	end
end

local function hide_flipbook(self)
	gui.set(gui.get_node("control-scroll"), "color.w", 0)
	gui.set(gui.get_node("gate-top"), "position.y", 30)
	gui.set(gui.get_node("gate-bot"), "position.y", 18)
	gui.set_color(gui.get_node("control-cover-middle"), vmath.vector4((105/255), (106/255), (106/255), 1))
end

local function set_gate_color(color)
	gui.set_color(gui.get_node("control-cover-n"), color)
	gui.set_color(gui.get_node("control-cover-e"), color)
	gui.set_color(gui.get_node("control-cover-s"), color)
	gui.set_color(gui.get_node("control-cover-w"), color)
	gui.set_color(gui.get_node("gate-top"), color)
	gui.set_color(gui.get_node("gate-bot"), color)
end

local function set_sfx_slider(self)
	gui.set(self.nodes.sfx_ring, "position.x", l_data.settings.sfx_slider*48-6)
	gui.set(self.nodes.sfx_ring_hit, "position.x", l_data.settings.sfx_slider*48+3)
	for i = 0,5 do
		if i <= l_data.settings.sfx_slider then
			gui.set_color(gui.get_node("sfx-node-"..(i)), vmath.vector4((223/255), (113/255), (38/255), 1))
			if i > 0 then
				gui.set_color(gui.get_node("sfx-bar-"..(i)), vmath.vector4((238/255), (195/255), (89/255), 1))
			end
		else
			gui.set_color(gui.get_node("sfx-node-"..(i)), vmath.vector4((89/255), (86/255), (82/255), 1))
			gui.set_color(gui.get_node("sfx-bar-"..(i)), vmath.vector4((105/255), (106/255), (106/255), 1))
		end
	end
	local icon_thresh = {0,1,3}
	for i = 1,3 do
		gui.set_color(gui.get_node("sfx-icon-"..i), self.slider_node_color[1][bool_to_num(l_data.settings.sfx_slider > icon_thresh[i])])
	end
	if l_data.settings.sfx_slider ~= 0 and self.sfx_slider_storage then
		self.sfx_slider_storage = nil
	end
end

function init(self)
	gui.set_render_order(3)
	-- self.viewing_setttings = false
	self.viewing_credits = false
	gui.set(gui.get_node("credits-nodes"), "position.y", 0)
	
	self.nodes = {}
	self.nodes.settings_nodes = gui.get_node("settings-nodes")
	gui.set(self.nodes.settings_nodes, "color.w", 0)
	self.nodes.settings_hit = gui.get_node("settings-hit")
	self.nodes.settings_top = gui.get_node("settings-top")
	self.nodes.settings_bot = gui.get_node("settings-bot")
	self.nodes.credits_hit = gui.get_node("credits-hit")
	self.nodes.credits_top = gui.get_node("credits-top")
	self.nodes.credits_bot = gui.get_node("credits-bot")
	self.nodes.credits_nodes = gui.get_node("credits-nodes")
	self.nodes.credits_door = gui.get_node("credits-door")
	self.nodes.credits_door_hit = gui.get_node("credits-door-hit")
	self.nodes.sfx_ring = gui.get_node("sfx-ring")
	self.nodes.sfx_ring_hit = gui.get_node("sfx-ring-hit")
	self.nodes.scroll_ring = gui.get_node("scroll-ring")
	self.nodes.scroll_ring_hit = gui.get_node("scroll-ring-hit")
	self.switches = {"tutorial", "profanity", "autosave", "dig", "scroll", "dkey", "graffiti", "splash", "lights"}
	self.switches_true = {"tutorial", "profanity", "autosave", "dig_around", "scroll", "dig_key", "graffiti", "splashscreen", "gamer_lights"}
	self.switch_on = {true,false,true,true,true,true,true,true,false}
	self.hover_node = nil
	self.settings_txt_color = {	{{vmath.vector4((223/255), (113/255), (38/255), 1), vmath.vector4((105/255), (106/255), (106/255), 1)}, {vmath.vector4((238/255), (146/255), 0, 1), vmath.vector4((132/255), (126/255), (135/255), 1)}, {vmath.vector4((63/255), (63/255), (116/255), 1), vmath.vector4(1, 1, (215/255), 1)}},
								{{vmath.vector4((185/255), (142/255), (219/255), 1), vmath.vector4((105/255), (106/255), (106/255), 1)}, {vmath.vector4((243/255), (210/255), 1, 1), vmath.vector4((132/255), (126/255), (135/255), 1)}, {vmath.vector4((63/255), (63/255), (116/255), 1), vmath.vector4(1, 1, 1, 1)}}}
	self.slider_node_color = {{vmath.vector4((223/255), (113/255), (38/255), 1), vmath.vector4((89/255), (86/255), (82/255), 1)}, {vmath.vector4((238/255), (146/255), 0, 1), vmath.vector4((132/255), (126/255), (135/255), 1)}}
	self.slider_bar_color = {{vmath.vector4((223/255), (113/255), (38/255), 1), vmath.vector4((89/255), (86/255), (82/255), 1)}, {vmath.vector4((238/255), (146/255), 0, 1), vmath.vector4((132/255), (126/255), (135/255), 1)}}
	self.e_timer = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_game") then
		for i,k in ipairs(self.switches) do
			-- print(self.switches_true[i]..": pre -", self.switch_on[i], "; saved -", l_data.settings[self.switches_true[i]])
			if self.switch_on[i] ~= l_data.settings[self.switches_true[i]] then
				-- print("*")
				self.switch_on[i] = l_data.settings[self.switches_true[i]]
				gui.set_color(gui.get_node(k.."-txt"), self.settings_txt_color[3-bool_to_num(i>6)][1][bool_to_num(self.switch_on[i])])
				if i == 3 or i == 4 then
					gui.set_color(gui.get_node(k.."-img"), self.settings_txt_color[3-bool_to_num(i>6)][1][bool_to_num(self.switch_on[i])])
				end
				if i < 7 or not self.switch_on[i] then
					gui.play_flipbook(gui.get_node(k.."-light"), "small-light-"..bool_to_word(self.switch_on[i]))
				else
					gui.play_flipbook(gui.get_node(k.."-light"), "small-light-"..bool_to_word(self.switch_on[i]).."-purple")
				end
				
				if i == 2 and l_data.graffiti_enabled then
					msg.post("/graffiti#graffiti", "enable")
				elseif i == 5 then
					local scroll_thresh
					if not l_data.settings.scroll then
						scroll_thresh = 0
						gui.set_color(self.nodes.scroll_ring, vmath.vector4((59/255), (59/255), (59/255), 1))
					else
						scroll_thresh = l_data.settings.scroll_slider
						gui.set_color(self.nodes.scroll_ring, vmath.vector4((128/255), (95/255), (22/255), 1))
					end
					for j = 1,5 do
						if j <= scroll_thresh then
							gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((223/255), (113/255), (38/255), 1))
							if j > 1 then
								gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((238/255), (195/255), (89/255), 1))
							end
						else
							gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((89/255), (86/255), (82/255), 1))
							if j > 1 then
								gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((105/255), (106/255), (106/255), 1))
							end
						end
					end
				elseif i == 7 then
					msg.post("/graffiti#graffiti", "set_graffiti", {alpha = 2-bool_to_num(l_data.settings.graffiti)})
				elseif i == 9 then
					msg.post("/gui#lights", "set_gamer_lights", {alpha = 2-bool_to_num(l_data.settings.gamer_lights)})
				end
			end
		end
	elseif message_id == hash("tutorial-off") then
		self.switch_on[1] = false
		gui.set_color(gui.get_node("tutorial-txt"), vmath.vector4((105/255), (106/255), (106/255), 1))
		gui.play_flipbook(gui.get_node("tutorial-light"), "small-light-off")
	elseif message_id == hash("hidden-settings") then
		gui.set(gui.get_node("hidden-settings"), "color.w", 1)
		msg.post("/gui#lights", "outlet")
		if not message.startup then
			gui.set(gui.get_node("notif"), "color.w", 1)
			gui.set(gui.get_node("notif-flash"), "color.w", 1)
			self.notif_timer = 0.1
			self.switch_on[9] = true
			l_data.settings.gamer_lights = true
			msg.post("/gui#lights", "set_gamer_lights", {alpha = 2-bool_to_num(self.switch_on[9])})
		end
	end
end

function update(self, dt)
	if self.e_timer then
		if self.e_timer <= 0 then
			local rand = math.random(0, 7)
			gui.play_flipbook(gui.get_node("broken-e"), "broken-e-"..rand)
			self.e_timer = 4
		else
			self.e_timer = self.e_timer - dt
		end
	end

	if self.quit_timer then
		if self.quit_timer <= 0 then
			sys.exit(0)
		else
			self.quit_timer = self.quit_timer - dt
		end
	end
	
	if self.notif_timer then
		if self.notif_timer <= 0 then
			gui.set(gui.get_node("notif-flash"), "color.w", 0)
			self.notif_timer = nil
		else
			self.notif_timer = self.notif_timer - dt
		end
	end	
	
end

function on_input(self, action_id, action)
	if gui.pick_node(self.nodes.settings_hit, action.x, action.y) and not self.viewing_credits then --settings toggle
		if action.pressed and action_id == hash("touch") then --click
			gui.set(self.nodes.settings_top, "position.y", 0)
		elseif action.released and action_id == hash("touch") and gui.get(self.nodes.settings_top, "position.y") == 0 then --release
			if gui.get(gui.get_node("notif"), "color.w") == 1 then
				gui.set(gui.get_node("notif-flash"), "color.w", 0)
				gui.set(gui.get_node("notif"), "color.w", 0)
			end
			
			if not self.viewing_setttings then
				gui.set_render_order(6)
				gui.set(self.nodes.settings_nodes, "color.w", 1)
				msg.post("/zoom#minefinder", "release_input_focus")
				msg.post("/gui#minefinder", "release_input_focus")
				msg.post("/gui-zoom#zoom", "release_input_focus")
				msg.post("/anims#anims", "release_input_focus")
				gui.play_flipbook(gui.get_node("broken-e"), "broken-e-0")
				self.e_timer = 2
			else
				gui.set(self.nodes.settings_nodes, "color.w", 0)
				gui.set_render_order(3)
				msg.post("/zoom#minefinder", "acquire_input_focus")
				msg.post("/gui#minefinder", "acquire_input_focus")
				msg.post("/gui-zoom#zoom", "acquire_input_focus")
				msg.post("/anims#anims", "acquire_input_focus")
				self.e_timer = nil
			end
			self.viewing_setttings = not self.viewing_setttings
			gui.set(self.nodes.settings_top, "position.y", 1)
		elseif gui.get(self.nodes.settings_bot, "color.x") ~= (234/255) then --hover
			gui.set_color(self.nodes.settings_bot, vmath.vector4((234/255), (172/255), (75/255), 1))
		end
	elseif gui.get(self.nodes.settings_bot, "color.x") ~= (223/255) then -- reset
		gui.set_color(self.nodes.settings_bot, vmath.vector4((223/255), (113/255), (38/255), 1))
		gui.set(self.nodes.settings_top, "position.y", 1)
	end

	if action.pressed and self.viewing_setttings and action_id == hash("touch") and not self.viewing_credits and not gui.pick_node(gui.get_node("settings"), action.x, action.y) and not gui.pick_node(self.nodes.settings_hit, action.x, action.y) and not gui.pick_node(gui.get_node("quit-hitbox"), action.x, action.y) and not (self.controls_visible and gui.pick_node(gui.get_node("control-scroll-hit"), action.x, action.y)) and not (l_data.more_settings and gui.pick_node(gui.get_node("hidden-settings"), action.x, action.y)) then
		gui.set(self.nodes.settings_nodes, "color.w", 0)
		gui.set_render_order(3)
		msg.post("/zoom#minefinder", "acquire_input_focus")
		msg.post("/gui#minefinder", "acquire_input_focus")
		msg.post("/gui-zoom#zoom", "acquire_input_focus")
		msg.post("/anims#anims", "acquire_input_focus")
		self.viewing_setttings = false
		self.e_timer = nil
	end

	if gui.pick_node(gui.get_node("quit-hitbox"), action.x, action.y) and not self.quit_timer and not l_data.save_quit then --quit game
		if action_id == hash("touch") and action.pressed then
			gui.set(gui.get_node("quit-underline"), "color.w", 0)
			gui.play_flipbook(gui.get_node("quit-x"), "red-x-lit")
			
			if l_data.settings.autosave then
				l_data.save_quit = true
				msg.post("/zoom#minefinder", "save_game_msg")
			elseif l_data.saved == nil then
				l_data.save_quit = true
			else
				self.quit_timer = 0.05
			end
		elseif gui.get(gui.get_node("quit-underline"), "color.w") == 0 then
			gui.set(gui.get_node("quit-underline"), "color.w", 1)
		end
	elseif gui.get(gui.get_node("quit-underline"), "color.w") ~= 0 then
		gui.set(gui.get_node("quit-underline"), "color.w", 0)
	end

	if self.viewing_setttings and not self.viewing_credits then 
		if not self.scroll_sliding and not self.sfx_sliding and gui.pick_node(self.nodes.credits_hit, action.x, action.y) then --credits button
			if action_id == hash("touch") and action.pressed then --click
				gui.set(self.nodes.credits_top, "position.y", -6)
			elseif action_id == hash("touch") and action.released and gui.get(self.nodes.credits_top, "position.y") == -6 then --release
				self.viewing_credits = true
				gui.set(self.nodes.credits_nodes, "color.w", 1)
				gui.set(self.nodes.credits_top, "position.y", 0)
			elseif gui.get(self.nodes.credits_bot, "color.x") ~= (238/255) then --hover
				gui.set_color(self.nodes.credits_bot, vmath.vector4((238/255), (195/255), (89/255), 1))
			end
		elseif gui.get(self.nodes.credits_bot, "color.x") ~= (89/255) then -- reset
			gui.set_color(self.nodes.credits_bot, vmath.vector4((89/255), (86/255), (82/255), 1))
			gui.set(self.nodes.credits_top, "position.y", 0)
		end
		
		local settings_mod = 0
		if l_data.more_settings then
			settings_mod = 3
		end
		
		local found_node = false
		for i = 1,6+settings_mod do --setting switches
			if not self.scroll_sliding and not self.sfx_sliding and gui.pick_node(gui.get_node(self.switches[i].."-hit"), action.x, action.y) then
				found_node = true
				if self.hover_node ~= i then
					if self.hover_node then
						gui.set_color(gui.get_node(self.switches[self.hover_node].."-txt"), self.settings_txt_color[3-bool_to_num(self.hover_node>6)][1][bool_to_num(self.switch_on[self.hover_node])])
						if self.hover_node == 3 or self.hover_node == 4 then
							gui.set_color(gui.get_node(self.switches[self.hover_node].."-img"), self.settings_txt_color[3-bool_to_num(self.hover_node>6)][1][bool_to_num(self.switch_on[self.hover_node])])
						end
					end
					self.hover_node = i
					gui.set_color(gui.get_node(self.switches[i].."-txt"), self.settings_txt_color[3-bool_to_num(i>6)][2][bool_to_num(self.switch_on[i])])
					if i == 3 or i == 4 then
						gui.set_color(gui.get_node(self.switches[i].."-img"), self.settings_txt_color[3-bool_to_num(i>6)][2][bool_to_num(self.switch_on[i])])
					end
				end
				if action.pressed and action_id == hash("touch") then
					self.node_clicked = i
					gui.set_color(gui.get_node(self.switches[i].."-txt"), self.settings_txt_color[3-bool_to_num(i>6)][3][bool_to_num(self.switch_on[i])])
					if i == 3 or i == 4 then
						gui.set_color(gui.get_node(self.switches[i].."-img"), self.settings_txt_color[3-bool_to_num(i>6)][3][bool_to_num(self.switch_on[i])])
					end
					if i < 7 or self.switch_on[i] then
						gui.play_flipbook(gui.get_node(self.switches[i].."-light"), "small-light-lit-"..bool_to_word(self.switch_on[i]))
					else
						gui.play_flipbook(gui.get_node(self.switches[i].."-light"), "small-light-lit-"..bool_to_word(self.switch_on[i]).."-purple")
					end
				elseif action.released and action_id == hash("touch") and self.node_clicked == i then
					msg.post("/gui#minefinder", "unsaved")
					self.switch_on[i] = not self.switch_on[i]
					l_data.settings[self.switches[i]] = self.switch_on[i]

					if i == 1 then
						msg.post("/gui#minefinder", "set_tutorial", {alpha = 2-bool_to_num(l_data.settings.tutorial)})
					elseif i == 2 and l_data.graffiti_enabled then
						msg.post("/graffiti#graffiti", "enable")
					elseif i == 3 then
						l_data.settings.autosave = self.switch_on[i]
					elseif i == 4 then
						l_data.settings.dig_around = self.switch_on[i]
					elseif i == 5 then
						local scroll_thresh
						if not l_data.settings.scroll then
							scroll_thresh = 0
							gui.set_color(self.nodes.scroll_ring, vmath.vector4((59/255), (59/255), (59/255), 1))
						else
							scroll_thresh = l_data.settings.scroll_slider
							gui.set_color(self.nodes.scroll_ring, vmath.vector4((128/255), (95/255), (22/255), 1))
						end
						for j = 1,5 do
							if j <= scroll_thresh then
								gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((223/255), (113/255), (38/255), 1))
								if j > 1 then
									gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((238/255), (195/255), (89/255), 1))
								end
							else
								gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((89/255), (86/255), (82/255), 1))
								if j > 1 then
									gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((105/255), (106/255), (106/255), 1))
								end
							end
						end
					elseif i == 6 then
						l_data.settings.dig_key = self.switch_on[i]
					elseif i == 7 then
						l_data.settings.graffiti = self.switch_on[i]
						msg.post("/graffiti#graffiti", "set_graffiti", {alpha = 2-bool_to_num(self.switch_on[i])})
					elseif i == 8 then
						l_data.settings.splashscreen = self.switch_on[i]
					elseif i == 9 then
						l_data.settings.gamer_lights = self.switch_on[i]
						msg.post("/gui#lights", "set_gamer_lights", {alpha = 2-bool_to_num(self.switch_on[i])})
					end
					gui.set_color(gui.get_node(self.switches[i].."-txt"), self.settings_txt_color[3-bool_to_num(i>6)][2][bool_to_num(self.switch_on[i])])
					if i == 3 or i == 4 then
						gui.set_color(gui.get_node(self.switches[i].."-img"), self.settings_txt_color[3-bool_to_num(i>6)][2][bool_to_num(self.switch_on[i])])
					end
					if i < 7 or not self.switch_on[i] then
						gui.play_flipbook(gui.get_node(self.switches[i].."-light"), "small-light-"..bool_to_word(self.switch_on[i]))
					else
						gui.play_flipbook(gui.get_node(self.switches[i].."-light"), "small-light-"..bool_to_word(self.switch_on[i]).."-purple")
					end
				end
				if self.node_clicked and self.node_clicked ~= i then
					gui.set_color(gui.get_node(self.switches[self.node_clicked].."-txt"), self.settings_txt_color[3-bool_to_num(self.node_clicked>6)][1][bool_to_num(self.switch_on[self.node_clicked])])
					if self.node_clicked == 3 or self.node_clicked == 4 then
						gui.set_color(gui.get_node(self.switches[self.node_clicked].."-img"), self.settings_txt_color[3-bool_to_num(self.node_clicked>6)][1][bool_to_num(self.switch_on[self.node_clicked])])
					end
					if i < 7 or not self.switch_on[self.node_clicked] then
						gui.play_flipbook(gui.get_node(self.switches[self.node_clicked].."-light"), "small-light-"..bool_to_word(self.switch_on[self.node_clicked]))
					else
						gui.play_flipbook(gui.get_node(self.switches[self.node_clicked].."-light"), "small-light-"..bool_to_word(self.switch_on[self.node_clicked]).."-purple")
					end
				end
			end
		end
		if not found_node then
			if self.hover_node then
				gui.set_color(gui.get_node(self.switches[self.hover_node].."-txt"), self.settings_txt_color[3-bool_to_num(self.hover_node>6)][1][bool_to_num(self.switch_on[self.hover_node])])
				if self.hover_node == 3 or self.hover_node == 4 then
					gui.set_color(gui.get_node(self.switches[self.hover_node].."-img"), self.settings_txt_color[3-bool_to_num(self.hover_node>6)][1][bool_to_num(self.switch_on[self.hover_node])])
				end
				self.hover_node = nil
			end
			if self.node_clicked then
				if self.node_clicked < 7 or not self.switch_on[self.node_clicked] then
					gui.play_flipbook(gui.get_node(self.switches[self.node_clicked].."-light"), "small-light-"..bool_to_word(self.switch_on[self.node_clicked]))
				else
					gui.play_flipbook(gui.get_node(self.switches[self.node_clicked].."-light"), "small-light-"..bool_to_word(self.switch_on[self.node_clicked]).."-purple")
				end
				self.node_clicked = nil
			end
		end


		
		if not (self.scroll_sliding or self.sfx_sliding) and l_data.settings.scroll then -- scroll slider ticks
			for i = 1,5 do
				if i ~= l_data.settings.scroll_slider and gui.pick_node(gui.get_node("scroll-node-hit-"..i), action.x, action.y) then
					if action.pressed and action_id == hash("touch") then
						gui.set_color(gui.get_node("scroll-node-"..i), vmath.vector4(1, 1, (215/255), 1))
					elseif action.released and action_id == hash("touch") then
						gui.set_color(gui.get_node("scroll-node-"..i), self.slider_node_color[2][bool_to_num(i < l_data.settings.scroll_slider)])
						l_data.settings.scroll_slider = i
						gui.set(self.nodes.scroll_ring, "position.x", (i-1)*48-6)
						gui.set(self.nodes.scroll_ring_hit, "position.x", (i-1)*48+3)
						for j = 1,5 do
							if j <= l_data.settings.scroll_slider then
								gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((223/255), (113/255), (38/255), 1))
								if j > 1 then
									gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((238/255), (195/255), (89/255), 1))
								end
							else
								gui.set_color(gui.get_node("scroll-node-"..(j)), vmath.vector4((89/255), (86/255), (82/255), 1))
								gui.set_color(gui.get_node("scroll-bar-"..(j)), vmath.vector4((105/255), (106/255), (106/255), 1))
							end
						end
					elseif gui.get_color(gui.get_node("scroll-node-"..i)) ~= self.slider_node_color[2][bool_to_num(i < l_data.settings.scroll_slider)] and gui.get_color(gui.get_node("scroll-node-"..i)) ~= vmath.vector4(1, 1, (215/255), 1) then
						gui.set_color(gui.get_node("scroll-node-"..i), self.slider_node_color[2][bool_to_num(i < l_data.settings.scroll_slider)])
					end
				elseif i ~= l_data.settings.scroll_slider and gui.get_color(gui.get_node("scroll-node-"..i)) ~= self.slider_node_color[1][bool_to_num(i < l_data.settings.scroll_slider)] then
					gui.set_color(gui.get_node("scroll-node-"..i), self.slider_node_color[1][bool_to_num(i < l_data.settings.scroll_slider)])
				end
			end
		end

		if self.scroll_sliding and l_data.settings.scroll then --scroll slider movement code
			local mouse_x
			if l_data.screen_ratio.x ~= 1 then
				local zoom = math.min(l_data.screen_size.x / l_data.screen_ratio.x, l_data.screen_size.y / l_data.screen_ratio.y)
				local projected_width = l_data.screen_size.x / zoom
				local xoffset = -(projected_width - l_data.screen_ratio.x) / 2
				mouse_x = (action.x / l_data.screen_ratio.x) * projected_width + xoffset
			else
				mouse_x = action.x
			end
			local node_select = math.floor((mouse_x+24-693)/48)

			if node_select < 5 and node_select > -1 and (node_select+1) ~= l_data.settings.scroll_slider then
				gui.set(self.nodes.scroll_ring, "position.x", node_select*48-6)
				gui.set(self.nodes.scroll_ring_hit, "position.x", node_select*48+3)
				l_data.settings.scroll_slider = node_select+1
				for i = 1,5 do
					if i <= l_data.settings.scroll_slider then
						gui.set_color(gui.get_node("scroll-node-"..(i)), vmath.vector4((223/255), (113/255), (38/255), 1))
						if i > 1 then
							gui.set_color(gui.get_node("scroll-bar-"..(i)), vmath.vector4((238/255), (195/255), (89/255), 1))
						end
					else
						gui.set_color(gui.get_node("scroll-node-"..(i)), vmath.vector4((89/255), (86/255), (82/255), 1))
						gui.set_color(gui.get_node("scroll-bar-"..(i)), vmath.vector4((105/255), (106/255), (106/255), 1))
					end
				end
			end

			if action.released and action_id == hash("touch") then
				gui.set_color(self.nodes.scroll_ring, vmath.vector4((183/255), (146/255), (61/255), 1))
				self.scroll_sliding = false
			end
		end
		
		if l_data.settings.scroll and gui.pick_node(self.nodes.scroll_ring_hit, action.x, action.y) then --scroll slider ring grab
			if action.pressed and action_id == hash("touch") then
				gui.set_color(self.nodes.scroll_ring, vmath.vector4(1, 1, (215/255), 1))
				self.scroll_sliding = true
			elseif gui.get(self.nodes.scroll_ring, "color.x") ~= (183/255) and gui.get(self.nodes.scroll_ring, "color.x") ~= 1 then
				gui.set_color(self.nodes.scroll_ring, vmath.vector4((183/255), (146/255), (61/255), 1))
			end
		elseif gui.get(self.nodes.scroll_ring, "color") == vmath.vector4((183/255), (146/255), (61/255), 1) then
			gui.set_color(self.nodes.scroll_ring, vmath.vector4((128/255), (95/255), (22/255), 1))
		end

		

		if not (self.scroll_sliding or self.sfx_sliding) and gui.pick_node(gui.get_node("sfx-icon-hit"), action.x, action.y) then -- sfx on/off
			if action.pressed and action_id == hash("touch") then
				for i = 1,3 do
					gui.set_color(gui.get_node("sfx-icon-"..i), vmath.vector4((238/255), (195/255), (89/255), 1))
				end
			elseif action.released and action_id == hash("touch") and gui.get_color(gui.get_node("sfx-icon-1")) == vmath.vector4((238/255), (195/255), (89/255), 1) then
				if self.sfx_slider_storage then
					l_data.settings.sfx_slider = self.sfx_slider_storage
					self.sfx_slider_storage = nil
				elseif l_data.settings.sfx_slider ~= 0 then
					self.sfx_slider_storage = l_data.settings.sfx_slider
					l_data.settings.sfx_slider = 0
				else
					l_data.settings.sfx_slider = 4
				end

				set_sfx_slider(self)		
			elseif gui.get_color(gui.get_node("sfx-icon-1")) ~= self.slider_node_color[2][bool_to_num(l_data.settings.sfx_slider > 0)] and gui.get_color(gui.get_node("sfx-icon-1")) ~= vmath.vector4((238/255), (195/255), (89/255), 1) then
				local icon_thresh = {0,1,3}
				for i = 1,3 do
					gui.set_color(gui.get_node("sfx-icon-"..i), self.slider_node_color[2][bool_to_num(l_data.settings.sfx_slider > icon_thresh[i])])
				end
			end
		elseif gui.get_color(gui.get_node("sfx-icon-1")) ~= self.slider_node_color[1][bool_to_num(l_data.settings.sfx_slider > 0)] then
			local icon_thresh = {0,1,3}
			for i = 1,3 do
				gui.set_color(gui.get_node("sfx-icon-"..i), self.slider_node_color[1][bool_to_num(l_data.settings.sfx_slider > icon_thresh[i])])
			end
		end
					
		if not (self.scroll_sliding or self.sfx_sliding) then -- sfx slider ticks
			for i = 0,5 do
				if i ~= l_data.settings.sfx_slider and gui.pick_node(gui.get_node("sfx-node-hit-"..i), action.x, action.y) then
					if action.pressed and action_id == hash("touch") then
						gui.set_color(gui.get_node("sfx-node-"..i), vmath.vector4(1, 1, (215/255), 1))
					elseif action.released and action_id == hash("touch") then
						gui.set_color(gui.get_node("sfx-node-"..i), self.slider_node_color[2][bool_to_num(i < l_data.settings.sfx_slider)])
						l_data.settings.sfx_slider = i
						set_sfx_slider(self)
					elseif gui.get_color(gui.get_node("sfx-node-"..i)) ~= self.slider_node_color[2][bool_to_num(i < l_data.settings.sfx_slider)] and gui.get_color(gui.get_node("sfx-node-"..i)) ~= vmath.vector4(1, 1, (215/255), 1) then
						gui.set_color(gui.get_node("sfx-node-"..i), self.slider_node_color[2][bool_to_num(i < l_data.settings.sfx_slider)])
					end
				elseif i ~= l_data.settings.sfx_slider and gui.get_color(gui.get_node("sfx-node-"..i)) ~= self.slider_node_color[1][bool_to_num(i < l_data.settings.sfx_slider)] then
					gui.set_color(gui.get_node("sfx-node-"..i), self.slider_node_color[1][bool_to_num(i < l_data.settings.sfx_slider)])
				end
			end
		end
		
		if self.sfx_sliding then --sfx slider movement code
			local mouse_x
			if l_data.screen_ratio.x ~= 1 then
				local zoom = math.min(l_data.screen_size.x / l_data.screen_ratio.x, l_data.screen_size.y / l_data.screen_ratio.y)
				local projected_width = l_data.screen_size.x / zoom
				local xoffset = -(projected_width - l_data.screen_ratio.x) / 2
				mouse_x = (action.x / l_data.screen_ratio.x) * projected_width + xoffset
			else
				mouse_x = action.x
			end
			local node_select = math.floor((mouse_x+24-669)/48)

			if node_select < 6 and node_select > -1 and node_select ~= l_data.settings.sfx_slider then
				l_data.settings.sfx_slider = node_select
				set_sfx_slider(self)
			end

			if action.released and action_id == hash("touch") then
				gui.set_color(self.nodes.sfx_ring, vmath.vector4((183/255), (146/255), (61/255), 1))
				self.sfx_sliding = false
			end
		end
		
		if gui.pick_node(self.nodes.sfx_ring_hit, action.x, action.y) then --sfx slider ring grab
			if action.pressed and action_id == hash("touch") then
				gui.set_color(self.nodes.sfx_ring, vmath.vector4(1, 1, (215/255), 1))
				self.sfx_sliding = true
			elseif gui.get(self.nodes.sfx_ring, "color.x") ~= (183/255) and gui.get(self.nodes.sfx_ring, "color.x") ~= 1 then
				gui.set_color(self.nodes.sfx_ring, vmath.vector4((183/255), (146/255), (61/255), 1))
			end
		elseif gui.get(self.nodes.sfx_ring, "color") == vmath.vector4((183/255), (146/255), (61/255), 1) then
			gui.set_color(self.nodes.sfx_ring, vmath.vector4((128/255), (95/255), (22/255), 1))
		end

		if not self.scroll_sliding and not self.sfx_sliding and gui.pick_node(gui.get_node("control-cover-hit"), action.x, action.y) then --controls
			if action.pressed and action_id == hash("touch") then
				set_gate_color(vmath.vector4(1, 1, 1, 1))
			elseif action.released and action_id == hash("touch") and gui.get_color(gui.get_node("gate-top")) == vmath.vector4(1, 1, 1, 1) then
				set_gate_color(vmath.vector4((136/255), (135/255), (134/255), 1))
				if not self.controls_visible then
					gui.set(gui.get_node("gate-bot"), "position.y", 36)
					gui.set(gui.get_node("gate-top"), "position.y", 12)
					gui.set_color(gui.get_node("control-cover-middle"), vmath.vector4((155/255), (173/255), (183/255), 1))
					gui.set(gui.get_node("control-scroll"), "color.w", 1)
					gui.play_flipbook(gui.get_node("control-scroll"), "scroll-open")
					self.controls_visible = true
				else
					self.controls_visible = false
					gui.play_flipbook(gui.get_node("control-scroll"), "scroll-close", hide_flipbook)
				end
			elseif gui.get_color(gui.get_node("gate-top")) ~= vmath.vector4((136/255), (135/255), (134/255), 1) and gui.get(gui.get_node("gate-top"), "color.x") ~= 1 then
				set_gate_color(vmath.vector4((136/255), (135/255), (134/255), 1))
			end
		elseif gui.get_color(gui.get_node("gate-top")) ~= vmath.vector4((89/255), (86/255), (82/255), 1) then
			set_gate_color(vmath.vector4((89/255), (86/255), (82/255), 1))
		end
	end

	if self.viewing_credits and gui.pick_node(self.nodes.credits_door_hit, action.x, action.y) then -- exit credits
		if action.pressed and action_id == hash("touch") then 
			self.viewing_credits = false
			gui.set(self.nodes.credits_nodes, "color.w", 0)
		elseif not self.credits_door_hover then
			gui.play_flipbook(self.nodes.credits_door, "credits-door-open")
			self.credits_door_hover = true
		end
	elseif self.credits_door_hover then 
		self.credits_door_hover = false
		gui.play_flipbook(self.nodes.credits_door, "credits-door-closed")
	end

	-- if action_id == hash("debug") and action.pressed then
		--debug
	-- end
end
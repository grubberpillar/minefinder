local function zoom_out(self)
	msg.post("/gui#minefinder", "enable")
	msg.post("/gui#minefinder", "set_props", {seconds = self.seconds, minutes = self.minutes, ticking = self.ticking})
	msg.post("/gui#minefinder", "set_flags", {num = self.flag_count})
	msg.post(".", "disable")
	msg.post("/gui#door", "zoom", {zoom = false})
	msg.post("/zoom#minefinder", "zoom", {zoom = false})
end

function init(self)
	self.seconds = 0
	self.seconds_storage = -1
	self.minutes = 0
	self.ticking = false
	gui.set_render_order(2)
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	if self.ticking then
		self.seconds = self.seconds + dt
	elseif gui.get_text(gui.get_node("timer")) ~= hash("-:--") and self.seconds == 0 and self.minutes == 0 then
		gui.set_text(gui.get_node("timer"), "-:--")
	end
	if self.seconds > 60 then
		self.minutes = self.minutes + 1
		self.seconds = self.seconds - 60
	end
	if math.floor(self.seconds) ~= math.floor(self.seconds_storage) and self.ticking then
		local seconds_txt = ""
		if self.seconds < 10 then
			seconds_txt = "0" .. math.floor(self.seconds)
		else
			seconds_txt = "" .. math.floor(self.seconds)
		end
		gui.set_text(gui.get_node("timer"), self.minutes..":"..seconds_txt)
		self.seconds_storage = self.seconds
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable") then
		msg.post("/gui#door", "enable")
	elseif message_id == hash("edit_arrows") then
		gui.set(gui.get_node("arrow-"..message.dir.."-bot"), "color.w", message.alpha)
		gui.set(gui.get_node("arrow-"..message.dir.."-top"), "color.w", message.alpha)
	elseif message_id == hash("zoom_click") then
		zoom_out(self)
	elseif message_id == hash("set_props") then
		self.seconds = message.seconds
		self.ticking = message.ticking
		self.minutes = message.minutes
		gui.set_text(gui.get_node("total-mines"), message.mines)
		local seconds_txt = ""
		if self.seconds < 10 then
			seconds_txt = "0" .. math.floor(self.seconds)
		else
			seconds_txt = "" .. math.floor(self.seconds)
		end
		gui.set_text(gui.get_node("timer"), self.minutes..":"..seconds_txt)
		gui.set_text(gui.get_node("highscore"), message.highscore)
		self.seconds_storage = self.seconds
	elseif message_id == hash("set_flags") then
		self.flag_count = message.num
		gui.set_text(gui.get_node("flags-left"), message.num)
		if message.num < 0 and gui.get_color(gui.get_node("flags-left")) == vmath.vector4(1, 1, 1, 1) then
			gui.set_color(gui.get_node("flags-left"), vmath.vector4((217/255), (87/255), (99/255), 1))
		elseif message.num >= 0 and gui.get_color(gui.get_node("flags-left")) == vmath.vector4(0.6, 0, 0, 1) then
			gui.set_color(gui.get_node("flags-left"), vmath.vector4(1, 1, 1, 1))
		end
	elseif message_id == hash("set_ticking") then
		self.ticking = message.ticking
	end
end

function on_input(self, action_id, action)
	if action.pressed and action_id == hash("touch") and gui.pick_node(gui.get_node("zoom-out-hit"), action.x, action.y) then -- zoom
		zoom_out(self)
	end

	if gui.pick_node(gui.get_node("quit-hitbox"), action.x, action.y) then --quit game
		if action_id == hash("touch") and action.pressed then
			gui.play_flipbook(gui.get_node("quit-x"), "red-x-lit")
			gui.set(gui.get_node("quit-underline"), "color.w", 0)
			sys.exit(0)
		elseif gui.get(gui.get_node("quit-underline"), "color.w") == 0 then
			gui.set(gui.get_node("quit-underline"), "color.w", 1)
		end
	elseif gui.get(gui.get_node("quit-underline"), "color.w") ~= 0 then
		gui.set(gui.get_node("quit-underline"), "color.w", 0)
	end

	local dir = {"n", "e", "s", "w"}
	for i = 1,4 do
		if gui.get(gui.get_node("arrow-"..dir[i].."-bot"), "color.w") ~= 0 and gui.pick_node(gui.get_node("arrow-"..dir[i].."-hit"), action.x, action.y) then
			if action.pressed and action_id == hash("touch") then
				gui.set(gui.get_node("arrow-"..dir[i].."-top"), "color.w", 0)
				gui.set_color(gui.get_node("arrow-"..dir[i].."-bot"), vmath.vector4(1, 1, 1, 1))
			elseif action.released and action_id == hash("touch") then
				gui.set(gui.get_node("arrow-"..dir[i].."-top"), "color.w", 1)
				gui.set_color(gui.get_node("arrow-"..dir[i].."-bot"), vmath.vector4((175/255), (175/255), (0/255), 1))
				gui.set(gui.get_node("arrow-"..dir[i].."-bot"), "color.w", 0)
				gui.set(gui.get_node("arrow-"..dir[i].."-top"), "color.w", 0)
				gui.set(gui.get_node("arrow-"..dir[(i+1)%4+1].."-bot"), "color.w", 1)
				gui.set(gui.get_node("arrow-"..dir[(i+1)%4+1].."-top"), "color.w", 1)
				msg.post("/zoom#minefinder", "arrow_press", {dir = dir[i]})
			elseif gui.get(gui.get_node("arrow-"..dir[i].."-top"), "color.w") ~= 0 and gui.get_color(gui.get_node("arrow-"..dir[i].."-top")) ~= vmath.vector4(1, 1, (215/255), 1) then
				gui.set_color(gui.get_node("arrow-"..dir[i].."-top"), vmath.vector4(1, 1, (215/255), 1))
			end
		elseif gui.get(gui.get_node("arrow-"..dir[i].."-bot"), "color.w") ~= 0 and gui.get_color(gui.get_node("arrow-"..dir[i].."-top")) ~= vmath.vector4((251/255), (242/255), (54/255), 1) then
			gui.set_color(gui.get_node("arrow-"..dir[i].."-top"), vmath.vector4((251/255), (242/255), (54/255), 1))
			gui.set_color(gui.get_node("arrow-"..dir[i].."-bot"), vmath.vector4((175/255), (175/255), (0/255), 1))
		end
	end
end